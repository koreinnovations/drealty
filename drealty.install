<?php

function drealty_install() {
  
}

function drealty_requirements($phase) {
  $requirements = array();
  // Ensure translations don't break at install time
  $t = get_t();

  if (!extension_loaded('curl')) {
    $requirements['drealty'] = array(
        'title' => $t('PHP Curl'),
        'description' => $t('dRealty requiresthat the PHP:cURL extension is installed and enabled. For more information and how to install PHP:cURL refer to the PHP:cURL manual: <a href="http://php.net/manual/en/book.curl.php" >http://php.net/manual/en/book.curl.php</a>'),
        'severity' => REQUIREMENT_ERROR,
    );
  }
  return $requirements;
}

function drealty_uninstall() {

  global $conf;

  $listings = entity_load("drealty_listing", FALSE, array(), TRUE);
  // need to delete all the listings this way so that we can clean up the database and remove all the images properly
  foreach ($listings as $listing) {
    $listing->delete();
  }

  cache_clear_all('drealty_', 'cache', TRUE);
  field_purge_batch(1000);

  foreach (array_keys($conf) as $key) {
    if (strpos($key, 'drealty_') === 0) {
      variable_del($key);
    }
  }
}

function drealty_schema() {


  $schema['drealty_external_photos'] = array(
      'description' => 'Tracks external photos (i.e. photos not stored locally)',
      'fields' => array(
          'id' => array('type' => 'serial', 'unsigned' => TRUE, 'not null' => TRUE, 'description' => 'The internal Id', 'group' => 'hidden'),
          'conid' => array('type' => 'serial', 'unsigned' => TRUE, 'not null' => TRUE),
          'listing_id' => array('type' => 'int', 'unsigned' => TRUE, 'not null' => TRUE, 'description' => 'The listing Id', 'group' => 'hidden'),
          'photo_url' => array('type' => 'varchar', 'length' => 255, 'not null' => TRUE, 'default' => ''),
      ),
  );


  // connections table
  $schema['drealty_connections'] = array(
      'description' => 'Base table to store connections.',
      'fields' => array(
  'conid' => array('type' => 'serial', 'unsigned' => TRUE, 'not null' => TRUE),
  'name' => array('type' => 'varchar', 'length' => 128, 'not null' => TRUE, 'default' => ''),
  'login_url' => array('type' => 'varchar', 'length' => 255, 'not null' => TRUE, 'default' => ''),
  'username' => array('type' => 'varchar', 'length' => 128, 'not null' => TRUE, 'default' => ''),
  'password' => array('type' => 'varchar', 'length' => 128, 'not null' => TRUE, 'default' => ''),
  'ua_string' => array('type' => 'varchar', 'length' => 255, 'not null' => TRUE, 'default' => ''),
  'ua_password' => array('type' => 'varchar', 'length' => 255, 'not null' => TRUE, 'default' => ''),
  'version' => array('type' => 'varchar', 'length' => 32, 'not null' => TRUE, 'default' => ''),
  'force_basic_auth' => array('type' => 'int', 'unsigned' => TRUE, 'not null' => TRUE, 'default' => 0),
  'use_compression' => array('type' => 'int', 'unsigned' => TRUE, 'not null' => TRUE, 'default' => 0),
  'use_interealty_auth' => array('type' => 'int', 'unsigned' => TRUE, 'not null' => TRUE, 'default' => 0),
  'active' => array('type' => 'int', 'unsigned' => TRUE, 'not null' => TRUE, 'default' => 0),
  'office_id' => array('type' => 'varchar', 'length' => 12, 'not null' => FALSE),
      ) + entity_exportable_schema_fields(),
      'primary key' => array('conid'),
  );

  // resources table
  $schema['drealty_resources'] = array(
      'description' => 'Base table for RETS Resources.',
      'fields' => array(
          'rid' => array('type' => 'serial', 'unsigned' => TRUE, 'not null' => TRUE),
          'conid' => array('type' => 'int', 'unsigned' => TRUE, 'not null' => TRUE),
          'systemname' => array('type' => 'varchar', 'length' => 255, 'not null' => TRUE, 'default' => ''),
          'description' => array('type' => 'varchar', 'length' => 255, 'not null' => FALSE),
          'lastupdate' => array('type' => 'int', 'not null' => TRUE),
          'selection_values' => array('type' => 'varchar', 'length' => 255, 'not null' => FALSE, 'default' => ''),
          'keyfield' => array('type' => 'varchar', 'length' => 128, 'not null' => TRUE, 'default' => ''),
          'chunk_size' => array('type' => 'int', 'not null' => TRUE, 'default' => 250),
      ),
      'primary key' => array('rid'),
  );
//    // classes table
  $schema['drealty_classes'] = array(
      'description' => 'Base Table for RETS Classes.',
      'fields' => array(
          'cid' => array('type' => 'serial', 'unsigned' => TRUE, 'not null' => TRUE),
          'conid' => array('type' => 'int', 'unsigned' => TRUE, 'not null' => TRUE),
          'systemname' => array('type' => 'varchar', 'length' => 255, 'not null' => TRUE, 'default' => ''),
          'standardname' => array('type' => 'varchar', 'length' => 255, 'not null' => TRUE, 'default' => ''),
          'visiblename' => array('type' => 'varchar', 'length' => 255, 'not null' => TRUE, 'default' => ''),
          'description' => array('type' => 'varchar', 'length' => 255, 'not null' => TRUE, 'default' => ''),
          'description' => array('type' => 'varchar', 'length' => 255, 'not null' => TRUE, 'default' => ''),
          'rid' => array('type' => 'int', 'unsigned' => TRUE, 'size' => 'normal', 'not null' => TRUE),
          'lifetime' => array('type' => 'int', 'unsigned' => TRUE, 'size' => 'normal', 'not null' => TRUE, 'default' => 28800),
          'enabled' => array('type' => 'int', 'size' => 'tiny', 'unsigned' => TRUE, 'not null' => TRUE, 'default' => 0),
          'configured' => array('type' => 'int', 'size' => 'tiny', 'unsigned' => TRUE, 'not null' => TRUE, 'default' => 0),
          'lastupdate' => array('type' => 'int', 'not null' > TRUE),
          'status_values' => array('type' => 'varchar', 'length' => 255, 'not null' => TRUE, 'default' => ''),
          'process_images' => array('type' => 'int', 'unsigned' => TRUE, 'size' => 'normal', 'not null' => TRUE, 'default' => 0),
          'download_images' => array('type' => 'int', 'unsigned' => TRUE, 'size' => 'normal', 'not null' => TRUE, 'default' => 0),
          'object_type' => array('type' => 'varchar', 'length' => 255, 'not null' => FALSE),
          'format' => array('type' => 'varchar', 'length' => 255, 'not null' => TRUE, 'default' => 'COMPACT-DECODED'),
          'chunk_size' => array('type' => 'int', 'unsigned' => TRUE, 'size' => 'normal', 'not null' => TRUE, 'default' => 500),
          'override_status_query' => array('type' => 'int', 'size' => 'tiny', 'unsigned' => TRUE, 'not null' => TRUE, 'default' => 0),
          'override_status_query_text' => array('type' => 'varchar', 'length' => 255, 'not null' => FALSE, 'default' => ''),
          'do_geocoding' => array('type' => 'int', 'size' => 'tiny', 'unsigned' => TRUE, 'not null' => TRUE, 'default' => 0),
      ),
      'primary key' => array('cid'),
  );

  // field list table
  $schema['drealty_fields'] = array(
      'description' => 'Base table for RETS Fields',
      'fields' => array(
          'fid' => array('type' => 'serial', 'unsigned' => TRUE, 'not null' => TRUE),
          'conid' => array('type' => 'int', 'unsigned' => TRUE, 'not null' => TRUE),
          'resource' => array('type' => 'varchar', 'length' => 255, 'not null' => TRUE, 'default' => ''),
          'systemname' => array('type' => 'varchar', 'length' => 255, 'not null' => TRUE, 'default' => ''),
          'standardname' => array('type' => 'varchar', 'length' => 255, 'not null' => TRUE, 'default' => ''),
          'longname' => array('type' => 'varchar', 'length' => 255, 'not null' => TRUE, 'default' => ''),
          'datatype' => array('type' => 'varchar', 'length' => 255, 'not null' => TRUE, 'default' => ''),
          'max_length' => array('type' => 'int', 'size' => 'small', 'unsigned' => TRUE, 'not null' => FALSE),
          'field_precision' => array('type' => 'int', 'size' => 'small', 'unsigned' => TRUE, 'not null' => FALSE),
          'interpretation' => array('type' => 'varchar', 'length' => 255, 'not null' => FALSE, 'default' => NULL),
          'lookupname' => array('type' => 'text', 'size' => 'normal', 'not null' => FALSE, 'default' => NULL),
          'classes' => array('type' => 'varchar', 'length' => 255, 'not null' => FALSE, 'default' => ''),
          'rets_returned' => array('type' => 'int', 'size' => 'small', 'unsigned' => TRUE, 'not null' => TRUE, 'default' => 1),
          'lastupdate' => array('type' => 'int', 'not null' > TRUE),
      ),
      'primary key' => array('fid'),
  );

  $schema['drealty_field_mappings'] = array(
      'description' => 'Base Table for field mappings',
      'fields' => array(
          'conid' => array('type' => 'int', 'unsigned' => TRUE, 'not null' => TRUE),
          'field_name' => array('type' => 'varchar', 'length' => 50, 'not null' => FALSE, 'default' => ''),
          'resource' => array('type' => 'varchar', 'length' => 50, 'not null' => TRUE, 'default' => ''),
          'systemname' => array('type' => 'varchar', 'length' => 50, 'not null' => TRUE, 'default' => ''),
          'cid' => array('type' => 'int', 'unsigned' => TRUE, 'not null' => TRUE),
      ),
      'primary key' => array('conid', 'field_name', 'resource', 'systemname', 'cid'),
  );

  $schema['drealty_resource_mappings'] = array(
      'description' => 'Base Table for resource to node-type mappings',
      'fields' => array(
          'mid' => array('type' => 'serial', 'unsigned' => TRUE, 'not null' => TRUE),
          'conid' => array('type' => 'int', 'unsigned' => TRUE, 'not null' => TRUE),
          'resource' => array('type' => 'varchar', 'length' => 128, 'not null' => TRUE, 'default' => ''),
          'entity_type' => array('type' => 'varchar', 'length' => 128, 'not null' => TRUE, 'default' => ''),
      ),
      'primary key' => array('mid'),
  );


  $schema['drealty_agent'] = array(
      'description' => 'Table to hold Agents',
      'fields' => array(
          'id' => array('type' => 'serial', 'unsigned' => TRUE, 'not null' => TRUE, 'description' => 'The internal Id', 'group' => 'hidden'),
          'conid' => array('type' => 'int', 'unsigned' => TRUE, 'not null' => TRUE, 'description' => 'The connection Id', 'group' => 'hidden'),
          'hash' => array('type' => 'varchar', 'length' => 255, 'not null' => TRUE, 'default' => '', 'description' => 'MD5 Hash used to determine if a listing has changed.', 'group' => 'hidden'),
          'class' => array('type' => 'int', 'not null' => FALSE, 'default' => 0, 'description' => 'The Resource Class from the MLS', 'group' => 'hidden'),
          'created' => array('type' => 'int', 'not null' => TRUE, 'default' => 0, 'description' => 'Date the listing was created in the system.', 'group' => 'hidden'),
          'changed' => array('type' => 'int', 'not null' => TRUE, 'default' => 0, 'description' => 'Last date the listing was changed/updated in the system', 'group' => 'hidden'),
          'agent_id' => array('type' => 'int', 'unsigned' => TRUE, 'not null' => TRUE, 'description' => 'Agent Identifier from the MLS system', 'group' => 'required', 'required' => TRUE),
          'type' => array('type' => 'varchar', 'not null' => FALSE, 'length' => 25, 'description' => 'The type of agent.', 'group' => 'required', 'required' => TRUE),
          'first_name' => array('type' => 'varchar', 'not null' => FALSE, 'length' => 50, 'description' => 'First name of the Agent..', 'group' => 'general'),
          'last_name' => array('type' => 'varchar', 'not null' => FALSE, 'length' => 50, 'description' => 'Last Name of the Agent.', 'group' => 'general'),
          'address_number' => array('type' => 'varchar', 'not null' => FALSE, 'length' => 25, 'description' => 'Address number.', 'group' => 'address'),
          'address_street' => array('type' => 'varchar', 'not null' => FALSE, 'length' => 128, 'description' => 'Address street.', 'group' => 'address'),
          'address_direction' => array('type' => 'varchar', 'not null' => FALSE, 'length' => 25, 'description' => 'Address direction.', 'group' => 'address'),
          'address_2' => array('type' => 'varchar', 'not null' => FALSE, 'length' => 128, 'description' => 'Address line 2.', 'group' => 'address'),
          'city' => array('type' => 'varchar', 'not null' => FALSE, 'length' => 128, 'description' => 'The city.', 'group' => 'address'),
          'state_or_parish' => array('type' => 'varchar', 'not null' => FALSE, 'length' => 25, 'description' => 'The state or parish.', 'group' => 'address'),
          'postal_code' => array('type' => 'varchar', 'not null' => FALSE, 'length' => 12, 'description' => 'The postal code.', 'group' => 'address'),
          'email' => array('type' => 'varchar', 'not null' => FALSE, 'length' => 128, 'description' => 'The email address for the Agent.', 'group' => 'contact'),
          'web_address' => array('type' => 'varchar', 'not null' => FALSE, 'length' => 255, 'description' => 'The web address for the Agent.', 'group' => 'contact'),
          'phone_office_area_code' => array('type' => 'varchar', 'not null' => FALSE, 'length' => 6, 'description' => 'The office phone area code.', 'group' => 'contact'),
          'phone_office' => array('type' => 'varchar', 'not null' => FALSE, 'length' => 25, 'description' => 'The phone number for the Agent.', 'group' => 'contact'),
          'phone_office_ext' => array('type' => 'varchar', 'not null' => FALSE, 'length' => 25, 'description' => 'The phone extentension for the Agent.', 'group' => 'contact'),
          'phone_cell_area_code' => array('type' => 'varchar', 'not null' => FALSE, 'length' => 6, 'description' => 'The cell phone area code.', 'group' => 'contact'),
          'phone_cell' => array('type' => 'varchar', 'not null' => FALSE, 'length' => 25, 'description' => 'The cell phone for the Agent.', 'group' => 'contact'),
          'office_name' => array('type' => 'varchar', 'not null' => FALSE, 'length' => 25, 'description' => 'The office name of the Agent.', 'group' => 'office'),
          'office_id' => array('type' => 'varchar', 'not null' => FALSE, 'length' => 25, 'description' => 'The the office mls id for the agent.', 'group' => 'office'),
          'office_address_number' => array('type' => 'varchar', 'not null' => FALSE, 'length' => 25, 'description' => 'The address number of the office.', 'group' => 'office'),
          'office_address_street' => array('type' => 'varchar', 'not null' => FALSE, 'length' => 128, 'description' => 'The address street of the office.', 'group' => 'office'),
          'office_address_direction' => array('type' => 'varchar', 'not null' => FALSE, 'length' => 25, 'description' => 'The address direction of the office.', 'group' => 'office'),
          'office_address_2' => array('type' => 'varchar', 'not null' => FALSE, 'length' => 128, 'description' => 'The address line 2 of the office.', 'group' => 'office'),
          'office_city' => array('type' => 'varchar', 'not null' => FALSE, 'length' => 128, 'description' => 'The office city.', 'group' => 'office'),
          'office_state_or_parish' => array('type' => 'varchar', 'not null' => FALSE, 'length' => 25, 'description' => 'The office state or parish.', 'group' => 'office'),
          'office_zip' => array('type' => 'varchar', 'not null' => FALSE, 'length' => 12, 'description' => 'The type of agent.', 'group' => 'office'),
          'office_phone_area_code' => array('type' => 'varchar', 'not null' => FALSE, 'length' => 6, 'description' => 'The office phone area code.', 'group' => 'office'),
          'office_phone' => array('type' => 'varchar', 'not null' => FALSE, 'length' => 25, 'description' => 'The office phone.', 'group' => 'office'),
          'office_fax' => array('type' => 'varchar', 'not null' => FALSE, 'length' => 25, 'description' => 'The office fax.', 'group' => 'office'),
          'office_fax_area_code' => array('type' => 'varchar', 'not null' => FALSE, 'length' => 6, 'description' => 'The office fax area code.', 'group' => 'office'),
          'office_email' => array('type' => 'varchar', 'not null' => FALSE, 'length' => 128, 'description' => 'The office email address.', 'group' => 'office'),
          'office_web_address' => array('type' => 'varchar', 'not null' => FALSE, 'length' => 255, 'description' => 'The office web address.', 'group' => 'office'),
      ),
      'primary key' => array('id'),
  );


  $schema['drealty_office'] = array(
      'description' => 'Table to hold Offices or Brokers',
      'fields' => array(
          'id' => array('type' => 'serial', 'unsigned' => TRUE, 'not null' => TRUE, 'description' => 'The internal Id', 'group' => 'hidden'),
          'conid' => array('type' => 'int', 'unsigned' => TRUE, 'not null' => TRUE, 'description' => 'The connection Id', 'group' => 'hidden'),
          'hash' => array('type' => 'varchar', 'length' => 255, 'not null' => TRUE, 'default' => '', 'description' => 'MD5 Hash used to determine if a listing has changed.', 'group' => 'hidden'),
          'class' => array('type' => 'int', 'not null' => FALSE, 'default' => 0, 'description' => 'The Resource Class from the MLS', 'group' => 'hidden'),
          'created' => array('type' => 'int', 'not null' => TRUE, 'default' => 0, 'description' => 'Date the listing was created in the system.', 'group' => 'hidden'),
          'changed' => array('type' => 'int', 'not null' => TRUE, 'default' => 0, 'description' => 'Last date the listing was changed/updated in the system', 'group' => 'hidden'),
          'office_id' => array('type' => 'int', 'unsigned' => TRUE, 'not null' => TRUE, 'description' => 'Broker or Office Identifier from the MLS system', 'group' => 'required', 'required' => TRUE),
          'type' => array('type' => 'varchar', 'not null' => FALSE, 'length' => 25, 'description' => 'The type of office.', 'group' => 'required', 'required' => TRUE),
          'name' => array('type' => 'varchar', 'not null' => FALSE, 'length' => 255, 'description' => 'The name of the Office..', 'group' => 'general'),
          'short_name' => array('type' => 'varchar', 'not null' => FALSE, 'length' => 128, 'description' => 'The short name of the Office.', 'group' => 'general'),
          'address_number' => array('type' => 'varchar', 'not null' => FALSE, 'length' => 25, 'description' => 'Address number.', 'group' => 'address'),
          'address_street' => array('type' => 'varchar', 'not null' => FALSE, 'length' => 128, 'description' => 'Address street.', 'group' => 'address'),
          'address_direction' => array('type' => 'varchar', 'not null' => FALSE, 'length' => 25, 'description' => 'Address direction.', 'group' => 'address'),
          'address_2' => array('type' => 'varchar', 'not null' => FALSE, 'length' => 25, 'description' => 'Address line 2.', 'group' => 'address'),
          'city' => array('type' => 'varchar', 'not null' => FALSE, 'length' => 50, 'description' => 'The city.', 'group' => 'address'),
          'state_or_parish' => array('type' => 'varchar', 'not null' => FALSE, 'length' => 25, 'description' => 'The state or parish.', 'group' => 'address'),
          'postal_code' => array('type' => 'varchar', 'not null' => FALSE, 'length' => 25, 'description' => 'The postal code.', 'group' => 'address'),
          'email' => array('type' => 'varchar', 'not null' => FALSE, 'length' => 128, 'description' => 'The email address for the Office.', 'group' => 'contact'),
          'web_address' => array('type' => 'varchar', 'not null' => FALSE, 'length' => 255, 'description' => 'The web address for the Office.', 'group' => 'contact'),
          'phone_area_code' => array('type' => 'varchar', 'not null' => FALSE, 'length' => 6, 'description' => 'The office phone area code.', 'group' => 'contact'),
          'phone' => array('type' => 'varchar', 'not null' => FALSE, 'length' => 25, 'description' => 'The phone number for the Office.', 'group' => 'contact'),
          'ext' => array('type' => 'varchar', 'not null' => FALSE, 'length' => 25, 'description' => 'The phone extentension for the Office.', 'group' => 'contact'),
          'fax_area_code' => array('type' => 'varchar', 'not null' => FALSE, 'length' => 6, 'description' => 'The office fax area code.', 'group' => 'contact'),
          'fax' => array('type' => 'varchar', 'not null' => FALSE, 'length' => 25, 'description' => 'The fax number  for the Office.', 'group' => 'contact'),
      ),
      'primary key' => array('id'),
  );


  $schema['drealty_openhouse'] = array(
      'description' => 'Table to hold open houses',
      'fields' => array(
          'id' => array('type' => 'serial', 'unsigned' => TRUE, 'not null' => TRUE, 'description' => 'The internal Id', 'group' => 'hidden'),
          'name' => array('type' => 'varchar', 'length' => 50, 'not null' => TRUE, 'default' => '', 'description' => "Name or Title of the Listing", 'group' => 'hidden'),
          'conid' => array('type' => 'int', 'unsigned' => TRUE, 'not null' => TRUE, 'description' => 'The connection Id', 'group' => 'hidden'),
          'hash' => array('type' => 'varchar', 'length' => 255, 'not null' => TRUE, 'default' => '', 'description' => 'MD5 Hash used to determine if a listing has changed.', 'group' => 'hidden'),
          'class' => array('type' => 'int', 'not null' => FALSE, 'default' => 0, 'description' => 'The Resource Class from the MLS', 'group' => 'hidden'),
          'created' => array('type' => 'int', 'not null' => TRUE, 'default' => 0, 'description' => 'Date the listing was created in the system.', 'group' => 'hidden'),
          'changed' => array('type' => 'int', 'not null' => TRUE, 'default' => 0, 'description' => 'Last date the listing was changed/updated in the system', 'group' => 'hidden'),
          'rets_imported' => array('type' => 'int', 'unsigned' => TRUE, 'size' => 'tiny', 'not null' => FALSE, 'default' => 1, 'description' => 'Is this a user submitted listing or mls imported', 'group' => 'hidden'),
          'openhouse_id' => array('type' => 'varchar', 'length' => 25, 'not null' => FALSE, 'default' => NULL, 'description' => 'The unique Open House Id # used to look up an individual open house listing listing.', 'group' => 'required', 'required' => TRUE, 'weight' => 1),
          'listing_id' => array('type' => 'varchar', 'length' => 25, 'not null' => FALSE, 'default' => NULL, 'description' => 'The unique MLS # used to look up an individual listing.', 'group' => 'required', 'required' => TRUE, 'weight' => 1),
          'listing_key' => array('type' => 'varchar', 'length' => 25, 'not null' => FALSE, 'default' => NULL, 'description' => 'A unique identifier for this record from the source system. Typically this is the MLS #, however systems like Interealty use a sysid field. Select the apporpriate field.', 'group' => 'required', 'required' => TRUE, 'weight' => 0),
          'listing_status' => array('type' => 'varchar', 'length' => 50, 'not null' => FALSE, 'default' => NULL, 'description' => "Local or regional status that are well known by business users. Each MlsStatus must map to a single RetsStatus. Multiple MlsStatus may map to a single RetsStatus.", 'group' => 'required', 'required' => TRUE),
          'start_datetime' => array('type' => 'int', 'not null' => TRUE, 'description' => 'The Start Date Time.', 'group' => 'date', 'entity_property_type' => 'date'),
          'end_datetime' => array('type' => 'int', 'not null' => TRUE, 'description' => 'The End Date Time.', 'group' => 'date', 'entity_property_type' => 'date'),
          'comments' => array('type' => 'text', 'not null' => FALSE, 'default' => NULL, 'description' => "Text comments if any.", 'group' => 'general'),
          'list_office_mls_id' => array('type' => 'varchar', 'length' => 25, 'not null' => FALSE, 'default' => NULL, 'description' => "The local, well-known identifier. This value may not be unique, specifically in the case of aggregation systems, this value should be the identifier from the original system.", 'group' => 'general'),
      ),
      'primary key' => array('id'),
  );

  $schema['drealty_listing'] = array(
      'description' => 'Table to hold listing data',
      'fields' => array(
  'id' => array('type' => 'serial', 'unsigned' => TRUE, 'not null' => TRUE, 'description' => 'The internal Id', 'group' => 'hidden'),
  'name' => array('type' => 'varchar', 'length' => 50, 'not null' => TRUE, 'default' => '', 'description' => "Name or Title of the Listing", 'group' => 'hidden'),
  'conid' => array('type' => 'int', 'unsigned' => TRUE, 'not null' => TRUE, 'description' => 'The connection Id', 'group' => 'hidden'),
  'hash' => array('type' => 'varchar', 'length' => 255, 'not null' => TRUE, 'default' => '', 'description' => 'MD5 Hash used to determine if a listing has changed.', 'group' => 'hidden'),
  'class' => array('type' => 'int', 'not null' => FALSE, 'default' => 0, 'description' => 'The Resource Class from the MLS', 'group' => 'hidden'),
  'created' => array('type' => 'int', 'not null' => TRUE, 'default' => 0, 'description' => 'Date the listing was created in the system.', 'group' => 'hidden'),
  'changed' => array('type' => 'int', 'not null' => TRUE, 'default' => 0, 'description' => 'Last date the listing was changed/updated in the system', 'group' => 'hidden'),
  'process_images' => array('type' => 'int', 'unsigned' => TRUE, 'not null' => TRUE, 'default' => 0, 'description' => 'Whether the images need to be processed', 'group' => 'hidden'),
  'download_images' => array('type' => 'int', 'unsigned' => TRUE, 'not null' => TRUE, 'default' => 0, 'description' => 'Whether the images need to be downloaded locally', 'group' => 'hidden'),
  'rets_imported' => array('type' => 'int', 'unsigned' => TRUE, 'size' => 'tiny', 'not null' => FALSE, 'default' => 1, 'description' => 'Is this a user submitted listing or mls imported', 'group' => 'hidden'),
  'listing_key' => array('type' => 'varchar', 'length' => 60, 'not null' => FALSE, 'default' => NULL, 'description' => 'A unique identifier for this record from the source system. Typically this is the MLS #, however systems like Interealty use a sysid field. Select the apporpriate field.', 'group' => 'required', 'required' => TRUE, 'weight' => 0),
  'listing_id' => array('type' => 'varchar', 'length' => 25, 'not null' => FALSE, 'default' => NULL, 'description' => 'The unique MLS # used to look up an individual listing.', 'group' => 'required', 'required' => TRUE, 'weight' => 1),
  'listing_date' => array('type' => 'int', 'not null' => TRUE, 'default' => 0, 'description' => "The datetime of the agreement between the seller and the seller's agent. If no date is stated, it may be the date on which the agreement is actually signed, if this is recorded, or it may be the date established by the award The Contract Date is also known as Date of Agreement.", 'group' => 'general'),
  'status_changed_datetime' => array('type' => 'int', 'not null' => TRUE, 'default' => 0, 'description' => "The date of the listings contractual status change. This is not necessarily the time the agent made the change in the MLS system, but rather the date of the contractual change.", 'group' => 'general'),
  'days_on_market' => array('type' => 'varchar', 'length' => 8, 'not null' => FALSE, 'default' => NULL, 'description' => "Number calculated from the days elapsed when a listing was first put on the market until it was put under contract, or taken off the market.", 'group' => 'general'),
  'listing_status' => array('type' => 'varchar', 'length' => 50, 'not null' => FALSE, 'default' => NULL, 'description' => "Local or regional status that are well known by business users. Each MlsStatus must map to a single RetsStatus. Multiple MlsStatus may map to a single RetsStatus.", 'group' => 'required', 'required' => TRUE),
  'list_price' => array('type' => 'int', 'not null' => TRUE, 'default' => 0, 'description' => "The current price of the home as determined by the seller and the contract seller's agent member. The list price is often negotiable. It is also known as the Asking Price. Formatting is specified by the currency attribute.", 'group' => 'general'),
  'rental_price' => array('type' => 'int', 'not null' => TRUE, 'default' => 0, 'description' => "The rental price of the home as determined by the seller and the contract seller's agent member. The list price is often negotiable. It is also known as the Asking Price. Formatting is specified by the currency attribute.", 'group' => 'general'),
  'view_on_web' => array('type' => 'varchar', 'length' => 10, 'not null' => FALSE, 'default' => NULL, 'description' => "A Y/N field indicating wether this listing can be viewed on the web.", 'group' => 'general'),
  'virtual_tour_url' => array('type' => 'varchar', 'length' => 128, 'not null' => FALSE, 'default' => NULL, 'description' => "The branded virtual tour URI.", 'group' => 'general'),
  'public_remarks' => array('type' => 'text', 'not null' => FALSE, 'default' => NULL, 'description' => "Text remarks that may be displayed to the public. In an MLS, it is the field where information is entered for the public. This information is intended to be visible on-line. This is typically information that describes the selling points of the building and/or land for sale. Local conditions and rules will determine what such content can contain. Generally, the following information is excluded: any information pertaining to entry to the property, the seller and/or tenant, listing member contact information. In other systems, these remarks will be determined by local business rules.", 'group' => 'general'),
  'bank_owned' => array('type' => 'varchar', 'length' => 60, 'not null' => FALSE, 'default' => NULL, 'description' => "A flag indicating if this property is bank owned or not.", 'group' => 'general'),
  //Listing:Location:Address
  'box_number' => array('type' => 'varchar', 'length' => 12, 'not null' => FALSE, 'default' => NULL, 'description' => "A container at a central mailing location, where the incoming mail of a person or legal entity is held until picked up by the person or legal entity. Also known as a post office box. Use the BoxNumber element to contain address location information not covered by the Civic Address.", 'group' => 'Listing:Location:Address'),
  'street_number' => array('type' => 'varchar', 'length' => 12, 'not null' => FALSE, 'default' => NULL, 'description' => "The street number portion of a listed property's street address.", 'group' => 'Listing:Location:Address'),
  'street_dir_prefix' => array('type' => 'varchar', 'length' => 12, 'not null' => FALSE, 'default' => NULL, 'description' => "The direction indicator that precedes the listed property's street name.", 'group' => 'Listing:Location:Address'),
  'street_name' => array('type' => 'varchar', 'length' => 50, 'not null' => FALSE, 'default' => NULL, 'description' => "The street name portion of a listed property's street address.", 'group' => 'Listing:Location:Address'),
  'street_additional_info' => array('type' => 'varchar', 'length' => 50, 'not null' => FALSE, 'default' => NULL, 'description' => "Information other than a prefix or suffix for the street portion of a postal address.", 'group' => 'Listing:Location:Address'),
  'street_dir_suffix' => array('type' => 'varchar', 'length' => 12, 'not null' => FALSE, 'default' => NULL, 'description' => "The direction indicator that follows a listed property's street address.", 'group' => 'Listing:Location:Address'),
  'street_suffix' => array('type' => 'varchar', 'length' => 12, 'not null' => FALSE, 'default' => NULL, 'description' => "The suffix portion of a listed property's street address.", 'group' => 'Listing:Location:Address'),
  'unit_number' => array('type' => 'varchar', 'length' => 12, 'not null' => FALSE, 'default' => NULL, 'description' => "Text field containing the number or portion of a larger building or complex. Unit Number should appear following the street suffix or, if it exists, the street suffix direction, in the street address. Examples are: 'APT G', '55', etc.", 'group' => 'Listing:Location:Address'),
  'city' => array('type' => 'varchar', 'length' => 128, 'not null' => FALSE, 'default' => NULL, 'description' => "The city in listing address.", 'group' => 'Listing:Location:Address'),
  'state_or_province' => array('type' => 'varchar', 'length' => 25, 'not null' => FALSE, 'default' => NULL, 'description' => "Text field containing either the accepted postal abbreviation or the full name for one of the 50 U.S. States and possessions or 13 Canadian provinces/territories.", 'group' => 'Listing:Location:Address'),
  'country' => array('type' => 'varchar', 'length' => 25, 'not null' => FALSE, 'default' => NULL, 'description' => "The country in a postal address.", 'group' => 'Listing:Location:Address'),
  'postal_code' => array('type' => 'varchar', 'length' => 60, 'not null' => FALSE, 'default' => NULL, 'description' => "The postal code portion of a street or mailing address.", 'group' => 'Listing:Location:Address'),
  'postal_code_plus_4' => array('type' => 'varchar', 'length' => 12, 'not null' => FALSE, 'default' => NULL, 'description' => "A ZIP+4 code uses the basic five-digit code plus four additional digits to identify a geographic segment within the five-digit delivery area, such as a city block, a group of apartments, an individual high-volume receiver of mail or any other unit that could use an extra identifier to aid in efficient mail sorting and delivery.", 'group' => 'Listing:Location:Address'),
  'carrier_route' => array('type' => 'varchar', 'length' => 50, 'not null' => FALSE, 'default' => NULL, 'description' => "The group of addresses to which the USPS assigns the same code to aid in mail delivery. For the USPS, these codes are 9 digits: 5 numbers for the ZIP Code, one letter for the carrier route type, and 3 numbers for the carrier route number.", 'group' => 'Listing:Location:Address'),
  'unparsed_address' => array('type' => 'varchar', 'length' => 128, 'not null' => FALSE, 'default' => NULL, 'description' => "The UnparsedAddress is a text representation of the address with the full civic location as a single entity. It may optionally include any of City, StateOrProvince, PostalCode and Country.", 'group' => 'Listing:Location:Address'),
  'county_or_parish' => array('type' => 'varchar', 'length' => 50, 'not null' => FALSE, 'default' => NULL, 'description' => "The County, Parish or other regional authority", 'group' => 'Listing:Location:Address'),
  'township' => array('type' => 'varchar', 'length' => 50, 'not null' => FALSE, 'default' => NULL, 'description' => "Township", 'group' => 'Listing:Location:Address'),
  //Listing:Location:Area
  'mls_area_major' => array('type' => 'varchar', 'length' => 255, 'not null' => FALSE, 'default' => NULL, 'description' => "The major marketing area name, as defined by the MLS or other non-governmental organization.", 'group' => 'Listing:Location:Area'),
  'mls_area_minor' => array('type' => 'varchar', 'length' => 50, 'not null' => FALSE, 'default' => NULL, 'description' => "The minor/sub marketing area name, as defined by the MLS or other non-governmental organization.", 'group' => 'Listing:Location:Area'),
  'subdivision_name' => array('type' => 'varchar', 'length' => 50, 'not null' => FALSE, 'default' => NULL, 'description' => "A neighborhood, community, complex or builder tract.", 'group' => 'Listing:Location:Area'),
  'subdivision_code' => array('type' => 'varchar', 'length' => 50, 'not null' => FALSE, 'default' => NULL, 'description' => "The code for a neighborhood, community, complex or builder tract.", 'group' => 'Listing:Location:Area'),
  //Listing:Location:GIS
  'latitude' => array('type' => 'float', 'scale' => 6, 'precision' => 10, 'not null' => FALSE, 'default' => NULL, 'description' => "The geographic latitude of some reference point on the property, specified in degrees and decimal parts.", 'group' => 'Listing:Location:GIS'),
  'longitude' => array('type' => 'float', 'scale' => 6, 'precision' => 10, 'not null' => FALSE, 'default' => NULL, 'description' => "The geographic longitude of some reference point on the property, specified in degrees and decimal parts.", 'group' => 'Listing:Location:GIS'),
  'directions' => array('type' => 'text', 'not null' => FALSE, 'default' => NULL, 'description' => "Driving directions to a property or location.", 'group' => 'Listing:Location:GIS'),
  'map_url' => array('type' => 'varchar', 'length' => 128, 'not null' => FALSE, 'default' => NULL, 'description' => "URL to a map.", 'group' => 'Listing:Location:GIS'),
  'CrossStreet' => array('type' => 'varchar', 'length' => 50, 'not null' => FALSE, 'default' => NULL, 'description' => "A short text field allowing for the input of cross streets.  This field is in addition to, and independent of, the driving directions field.", 'group' => 'Listing:Location:GIS'),
  //Listing:Location:School
  'elementary_school' => array('type' => 'varchar', 'length' => 50, 'not null' => FALSE, 'default' => NULL, 'description' => "The name of the primary school having a catchment area that includes the associated property.", 'group' => 'Listing:Location:School'),
  'middle_or_junior_school' => array('type' => 'varchar', 'length' => 50, 'not null' => FALSE, 'default' => NULL, 'description' => "The name of the junior or middle school having a catchment area that includes the associated property.", 'group' => 'Listing:Location:School'),
  'high_school' => array('type' => 'varchar', 'length' => 50, 'not null' => FALSE, 'default' => NULL, 'description' => "The name of the high school having a catchment area that includes the associated property.", 'group' => 'Listing:Location:School'),
  'school_district' => array('type' => 'varchar', 'length' => 50, 'not null' => FALSE, 'default' => NULL, 'description' => "The name of the school district having a catchment area in which the property is located.", 'group' => 'Listing:Location:School'),
  //Listing:AgentOffice:ListAgent
  'list_agent_first_name' => array('type' => 'varchar', 'length' => 50, 'not null' => FALSE, 'default' => NULL, 'description' => "A person's name that precedes the surname.", 'group' => 'Listing:AgentOffice:ListAgent'),
  'list_agent_last_name' => array('type' => 'varchar', 'length' => 50, 'not null' => FALSE, 'default' => NULL, 'description' => "A person's surname.", 'group' => 'Listing:AgentOffice:ListAgent'),
  'list_agent_full_name' => array('type' => 'varchar', 'length' => 128, 'not null' => FALSE, 'default' => NULL, 'description' => "A person's full name. Used if there are not seperate fields for the first and last names..", 'group' => 'Listing:AgentOffice:ListAgent'),
  'list_agent_mls_id' => array('type' => 'varchar', 'length' => 60, 'not null' => FALSE, 'default' => NULL, 'description' => "The local, well-known identifier for the member. This value may not be unique, specifically in the case of aggregation systems, this value should be the identifier from the original system.", 'group' => 'Listing:AgentOffice:ListAgent'),
  //Listing:AgentOffice:ListOffice
  'list_office_name' => array('type' => 'varchar', 'length' => 50, 'not null' => FALSE, 'default' => NULL, 'description' => "The name of the listing office.", 'group' => 'Listing:AgentOffice:ListOffice'),
  'list_office_phone' => array('type' => 'varchar', 'length' => 25, 'not null' => FALSE, 'default' => NULL, 'description' => "The phone number of the listing office.", 'group' => 'Listing:AgentOffice:ListOffice'),
  'list_office_fax' => array('type' => 'varchar', 'length' => 25, 'not null' => FALSE, 'default' => NULL, 'description' => "The fax number of the listing office.", 'group' => 'Listing:AgentOffice:ListOffice'),
  'list_office_email' => array('type' => 'varchar', 'length' => 128, 'not null' => FALSE, 'default' => NULL, 'description' => "The email address of the listing office.", 'group' => 'Listing:AgentOffice:ListOffice'),
  'list_office_web_address' => array('type' => 'varchar', 'length' => 128, 'not null' => FALSE, 'default' => NULL, 'description' => "The website URL for the listing office.", 'group' => 'Listing:AgentOffice:ListOffice'),
  'list_office_mls_id' => array('type' => 'varchar', 'length' => 25, 'not null' => FALSE, 'default' => NULL, 'description' => "The local, well-known identifier. This value may not be unique, specifically in the case of aggregation systems, this value should be the identifier from the original system.", 'group' => 'Listing:AgentOffice:ListOffice'),
  //Listing:AgentOffice:CoListAgent
  'colist_agent_first_name' => array('type' => 'varchar', 'length' => 25, 'not null' => FALSE, 'default' => NULL, 'description' => "A person's name that precedes the surname.", 'group' => 'Listing:AgentOffice:CoListAgent'),
  'colist_agent_last_name' => array('type' => 'varchar', 'length' => 25, 'not null' => FALSE, 'default' => NULL, 'description' => "A person's surname.", 'group' => 'Listing:AgentOffice:CoListAgent'),
  'colist_agent_full_name' => array('type' => 'varchar', 'length' => 128, 'not null' => FALSE, 'default' => NULL, 'description' => "A person's full name. Used if there are not seperate fields for the first and last names..", 'group' => 'Listing:AgentOffice:CoListAgent'),
  'colist_agent_mls_id' => array('type' => 'varchar', 'length' => 25, 'not null' => FALSE, 'default' => NULL, 'description' => "The local, well-known identifier for the member. This value may not be unique, specifically in the case of aggregation systems, this value should be the identifier from the original system.", 'group' => 'Listing:AgentOffice:CoListAgent'),
  //Listing:AgentOffice:CoListOffice
  'colist_office_name' => array('type' => 'varchar', 'length' => 25, 'not null' => FALSE, 'default' => NULL, 'description' => "The name of the listing office.", 'group' => 'Listing:AgentOffice:CoListOffice'),
  'colist_office_phone' => array('type' => 'varchar', 'length' => 15, 'not null' => FALSE, 'default' => NULL, 'description' => "The phone number of the listing office.", 'group' => 'Listing:AgentOffice:CoListOffice'),
  'colist_office_fax' => array('type' => 'varchar', 'length' => 15, 'not null' => FALSE, 'default' => NULL, 'description' => "The fax number of the listing office.", 'group' => 'Listing:AgentOffice:CoListOffice'),
  'colist_office_email' => array('type' => 'varchar', 'length' => 50, 'not null' => FALSE, 'default' => NULL, 'description' => "The email address of the listing office", 'group' => 'Listing:AgentOffice:CoListOffice'),
  'colist_office_web_address' => array('type' => 'varchar', 'length' => 128, 'not null' => FALSE, 'default' => NULL, 'description' => "The website URL for the listing office.", 'group' => 'Listing:AgentOffice:CoListOffice'),
  'colist_office_mls_id' => array('type' => 'varchar', 'length' => 12, 'not null' => FALSE, 'default' => NULL, 'description' => "The local, well-known identifier. This value may not be unique, specifically in the case of aggregation systems, this value should be the identifier from the original system.", 'group' => 'Listing:AgentOffice:CoListOffice'),
  //Listing:Property
  'property_type' => array('type' => 'varchar', 'length' => 60, 'not null' => FALSE, 'default' => NULL, 'description' => "Residential, Rental, etc.", 'group' => 'Listing:Property'),
  'property_sub_type' => array('type' => 'varchar', 'length' => 25, 'not null' => FALSE, 'default' => NULL, 'description' => "A list of types of residential properties, i.e. SFR, Condo, etc.", 'group' => 'Listing:Property'),
  'association_fee' => array('type' => 'varchar', 'length' => 25, 'not null' => FALSE, 'default' => NULL, 'description' => "A fee paid by the homeowner to the association that governs a condominium complex for their part of the maintenance and management of the project. Formatting is specified by the currency attribute and the period attribute signifies how often the fee is payable (monthly, quarterly, etc.).", 'group' => 'Listing:Property'),
  'association_yn' => array('type' => 'varchar', 'length' => 25, 'not null' => FALSE, 'default' => NULL, 'description' => "Is there a Home Owners Association.  A separate Y/N field is needed because not all associations have dues.", 'group' => 'Listing:Property'),
  'association_fee_inclusions' => array('type' => 'text', 'not null' => FALSE, 'default' => NULL, 'description' => "A list of features/services included in the assocation fee.", 'group' => 'Listing:Property'),
  'lot_size_area' => array('type' => 'int', 'not null' => TRUE, 'default' => 0, 'description' => "The area of the lot (typically in acerage).", 'group' => 'Listing:Property'),
  'lot_size_dimensions' => array('type' => 'varchar', 'length' => 128, 'not null' => FALSE, 'default' => NULL, 'description' => "The dimensions of the lot.", 'group' => 'Listing:Property'),
  'land_lease_yn' => array('type' => 'varchar', 'length' => 25, 'not null' => FALSE, 'default' => NULL, 'description' => "Is the land included in the sale or is the land under a lease.", 'group' => 'Listing:Property'),
  'lot_features' => array('type' => 'text', 'not null' => FALSE, 'default' => NULL, 'description' => "A general purpose container of lot feature information. The previous version had several possible value classes broken into individual fields grouped under LotData", 'group' => 'Listing:Property'),
  'lot_description' => array('type' => 'text', 'not null' => FALSE, 'default' => NULL, 'description' => "A description of the lot.", 'group' => 'Listing:Property'),
  'utilities_on_property' => array('type' => 'text', 'not null' => FALSE, 'default' => NULL, 'description' => "A picklist of utilities present on the property..", 'group' => 'Listing:Property'),
  'road_type' => array('type' => 'text', 'not null' => FALSE, 'default' => NULL, 'description' => "The type of road that accesses the property ( paved, gravel, public, private, etc.).", 'group' => 'Listing:Property'),
  'improvements' => array('type' => 'text', 'not null' => FALSE, 'default' => NULL, 'description' => "A picklist of improvements (curbs, sidewalks, street lamps, septic, sewer, etc).", 'group' => 'Listing:Property'),
  'community_features' => array('type' => 'text', 'not null' => FALSE, 'default' => NULL, 'description' => "A list of features offered by the community.", 'group' => 'Listing:Property'),
  'pool_features' => array('type' => 'text', 'not null' => FALSE, 'default' => NULL, 'description' => "A list of features or description of a Pool.", 'group' => 'Listing:Property'),
  'spa_features' => array('type' => 'text', 'not null' => FALSE, 'default' => NULL, 'description' => "A list of features or description of a Spa.", 'group' => 'Listing:Property'),
  'inclusions' => array('type' => 'text', 'not null' => FALSE, 'default' => NULL, 'description' => "A list of inclusions for the property.", 'group' => 'Listing:Property'),
  'legal_description' => array('type' => 'text', 'not null' => FALSE, 'default' => NULL, 'description' => "A legal description.", 'group' => 'Listing:Property'),
  'zoning' => array('type' => 'text', 'not null' => FALSE, 'default' => NULL, 'description' => "The municipality zoning for the property.", 'group' => 'Listing:Property'),
  'finance_terms' => array('type' => 'text', 'not null' => FALSE, 'default' => NULL, 'description' => "A pick list of financing terms.", 'group' => 'Listing:Property'),
  'assessments' => array('type' => 'varchar', 'length' => 25, 'not null' => FALSE, 'default' => NULL, 'description' => "The monetary assessments on the property if any.", 'group' => 'Listing:Property'),
  'taxes' => array('type' => 'varchar', 'length' => 25, 'not null' => FALSE, 'default' => NULL, 'description' => "The property tax amount.", 'group' => 'Listing:Property'),
  'tax_year' => array('type' => 'int', 'not null' => TRUE, 'default' => 0, 'description' => "The tax year for the tax amount.", 'group' => 'Listing:Property'),
  //Listing:Property:Structure
  'beds_total' => array('type' => 'varchar', 'length' => 25, 'not null' => FALSE, 'default' => NULL, 'description' => "The total number of bedrooms in the dwelling.", 'group' => 'Listing:Property:Structure'),
  'baths_total' => array('type' => 'varchar', 'length' => 25, 'not null' => FALSE, 'default' => NULL, 'description' => "String allowing for whatever total of bathrooms existed in legacy systems. Examples may be 'three full and one half', 1.2, One and a half, 1.5", 'group' => 'Listing:Property:Structure'),
  'baths_full' => array('type' => 'varchar', 'length' => 25, 'not null' => FALSE, 'default' => NULL, 'description' => "The number of full bathrooms in the dwelling.", 'group' => 'Listing:Property:Structure'),
  'baths_half' => array('type' => 'varchar', 'length' => 25, 'not null' => FALSE, 'default' => NULL, 'description' => "The number of half bathrooms in the dwelling.", 'group' => 'Listing:Property:Structure'),
  'baths_three_quarters' => array('type' => 'varchar', 'length' => 25, 'not null' => FALSE, 'default' => NULL, 'description' => "The number of three quarter bathrooms in the dwelling.", 'group' => 'Listing:Property:Structure'),
  'living_area' => array('type' => 'int', 'not null' => TRUE, 'default' => 0, 'description' => "The total measurable finished space for all buildings.", 'group' => 'Listing:Property:Structure'),
  'building_area_total' => array('type' => 'int', 'not null' => TRUE, 'default' => 0, 'description' => "Total area of the structure. Includes both finished and unfinished areas.", 'group' => 'Listing:Property:Structure'),
  'detached_yn' => array('type' => 'varchar', 'length' => 8, 'not null' => FALSE, 'default' => NULL, 'description' => "A flag indicating that the primary structure is attached to another structure that is not included in the sale.  i.e. one unit of a duplex. This flag may be T/F, Y/N or a list of attached or detached. As with all flags, the field may be null.", 'group' => 'Listing:Property:Structure'),
  'garage_yn' => array('type' => 'varchar', 'length' => 8, 'not null' => FALSE, 'default' => NULL, 'description' => "A flag indicating that the listing has a garage. This flag may be T/F, Y/N or other true, false or unknown indicator. As with all flags, the field may be null.", 'group' => 'Listing:Property:Structure'),
  'garage_spaces' => array('type' => 'varchar', 'length' => 8, 'not null' => FALSE, 'default' => NULL, 'description' => "The number of spaces in the garage(s).", 'group' => 'Listing:Property:Structure'),
  'garage_dimensions' => array('type' => 'varchar', 'length' => 128, 'not null' => FALSE, 'default' => NULL, 'description' => "The dimensions of the garage.", 'group' => 'Listing:Property:Structure'),
  'garage_features' => array('type' => 'text', 'not null' => FALSE, 'default' => NULL, 'description' => "A pick list of features for the garage.", 'group' => 'Listing:Property:Structure'),
  'attached_garage_yn' => array('type' => 'varchar', 'length' => 8, 'not null' => FALSE, 'default' => NULL, 'description' => "A flag indicating that the garage attached to the dwelling.", 'group' => 'Listing:Property:Structure'),
  'carport_spaces' => array('type' => 'varchar', 'length' => 25, 'not null' => FALSE, 'default' => NULL, 'description' => "The number of covered parking spaces not including garage spaces.", 'group' => 'Listing:Property:Structure'),
  'open_parking_yn' => array('type' => 'varchar', 'length' => 25, 'not null' => FALSE, 'default' => NULL, 'description' => "A flag indicating that any parking spaces associated with the property are not covered by a roof.", 'group' => 'Listing:Property:Structure'),
  'covered_spaces' => array('type' => 'varchar', 'length' => 25, 'not null' => FALSE, 'default' => NULL, 'description' => "The total number of garage and carport spaces.", 'group' => 'Listing:Property:Structure'),
  'parking_features' => array('type' => 'text', 'not null' => FALSE, 'default' => NULL, 'description' => "A pick list of parking features.", 'group' => 'Listing:Property:Structure'),
  'parking_total' => array('type' => 'varchar', 'length' => 25, 'not null' => FALSE, 'default' => NULL, 'description' => "The total number of parking spaces included in the sale.", 'group' => 'Listing:Property:Structure'),
  'stories_total' => array('type' => 'varchar', 'length' => 25, 'not null' => FALSE, 'default' => NULL, 'description' => "The total number of above grade stories in the structure.", 'group' => 'Listing:Property:Structure'),
  'year_built' => array('type' => 'int', 'not null' => FALSE, 'default' => NULL, 'description' => "The year that an occupancy permit is first granted for the house or other local measure of initial habitability of the build. The type definition permits an empty value with an attribute noting that it is an unknown date or that the building is new construction. While constraints have not been applied, convention at the time of adoption has this as a four (4) digit year value.", 'group' => 'Listing:Property:Structure'),
  'heating' => array('type' => 'text', 'not null' => FALSE, 'default' => NULL, 'description' => "A pick list of heating features.", 'group' => 'Listing:Property:Structure', 'multi' => TRUE),
  'cooling' => array('type' => 'text', 'not null' => FALSE, 'default' => NULL, 'description' => "A pick list of cooling features.", 'group' => 'Listing:Property:Structure', 'multi' => TRUE),
  'interior_features' => array('type' => 'text', 'not null' => FALSE, 'default' => NULL, 'description' => "A pick list of interior features.", 'group' => 'Listing:Property:Structure', 'multi' => TRUE),
  'exterior_features' => array('type' => 'text', 'not null' => FALSE, 'default' => NULL, 'description' => "A pick list of exterior features.", 'group' => 'Listing:Property:Structure', 'multi' => TRUE),
  'architectural_style' => array('type' => 'varchar', 'length' => 128, 'not null' => FALSE, 'default' => NULL, 'description' => "The architectural Style of the dwelling", 'group' => 'Listing:Property:Structure'),
  'rooms_total' => array('type' => 'varchar', 'length' => 25, 'not null' => FALSE, 'default' => NULL, 'description' => "The number of rooms in the dwelling.", 'group' => 'Listing:Property:Structure'),
  'fireplace_features' => array('type' => 'text', 'not null' => FALSE, 'default' => NULL, 'description' => "A pick list of fireplace features", 'group' => 'Listing:Property:Structure'),
  'fireplace_yn' => array('type' => 'varchar', 'length' => 5, 'not null' => FALSE, 'default' => NULL, 'description' => "A Yes/No field indicating if the dwelling has a fireplace.", 'group' => 'Listing:Property:Structure'),
  'roof' => array('type' => 'text', 'not null' => FALSE, 'default' => NULL, 'description' => "A pick list of roof features and/or construction type/materials.", 'group' => 'Listing:Property:Structure', 'multi' => TRUE),
  'construction_materials' => array('type' => 'text', 'not null' => FALSE, 'default' => NULL, 'description' => "A pick list of construction materials for the dwelling or structure.", 'group' => 'Listing:Property:Structure', 'multi' => TRUE),
  //bedrooms
  'bedrooms_upper' => array('type' => 'varchar', 'length' => 8, 'not null' => FALSE, 'default' => NULL, 'description' => "Number of bedrooms on the upper floor.", 'group' => 'Listing:Property:Structure'),
  'bedrooms_main' => array('type' => 'varchar', 'length' => 8, 'not null' => FALSE, 'default' => NULL, 'description' => "Number of bedrooms on the main floor.", 'group' => 'Listing:Property:Structure'),
  'bedrooms_lower' => array('type' => 'varchar', 'length' => 8, 'not null' => FALSE, 'default' => NULL, 'description' => "Number of bedrooms on the lower floor.", 'group' => 'Listing:Property:Structure'),
  'bedrooms_basement' => array('type' => 'varchar', 'length' => 8, 'not null' => FALSE, 'default' => NULL, 'description' => "Number of bedrooms in the basement.", 'group' => 'Listing:Property:Structure'),
  //bathrooms
  'bathrooms_upper' => array('type' => 'varchar', 'length' => 8, 'not null' => FALSE, 'default' => NULL, 'description' => "Number of bathrooms on the upper floor.", 'group' => 'Listing:Property:Structure'),
  'bathrooms_main' => array('type' => 'varchar', 'length' => 8, 'not null' => FALSE, 'default' => NULL, 'description' => "Number of bathrooms on the main floor.", 'group' => 'Listing:Property:Structure'),
  'bathrooms_lower' => array('type' => 'varchar', 'length' => 8, 'not null' => FALSE, 'default' => NULL, 'description' => "Number of bathrooms on the lower floor.", 'group' => 'Listing:Property:Structure'),
  'bathrooms_basement' => array('type' => 'varchar', 'length' => 8, 'not null' => FALSE, 'default' => NULL, 'description' => "Number of bathrooms in the basement", 'group' => 'Listing:Property:Structure'),
  //dining room
  'dining_room_area' => array('type' => 'int', 'not null' => FALSE, 'default' => NULL, 'description' => "The square footage of the room.", 'group' => 'Listing:Property:Rooms'),
  'dining_room_dimensions' => array('type' => 'varchar', 'length' => 128, 'not null' => FALSE, 'default' => NULL, 'description' => "Measurement specifying a list of dimensions for an irregular space.", 'group' => 'Listing:Property:Rooms'),
  'dining_room_level_or_floor' => array('type' => 'varchar', 'length' => 25, 'not null' => FALSE, 'default' => NULL, 'description' => "The level or floor of the room.", 'group' => 'Listing:Property:Rooms'),
  'dining_room_amenities' => array('type' => 'text', 'not null' => FALSE, 'default' => NULL, 'description' => "A pick list of amenities.", 'group' => 'Listing:Property:Rooms'),
  'dining_room_description' => array('type' => 'text', 'not null' => FALSE, 'default' => NULL, 'description' => "A description of the room.", 'group' => 'Listing:Property:Rooms'),
  //living area
  'living_room_area' => array('type' => 'int', 'not null' => FALSE, 'default' => NULL, 'description' => "The square footage of the room.", 'group' => 'Listing:Property:Rooms'),
  'living_room_dimensions' => array('type' => 'varchar', 'length' => 128, 'not null' => FALSE, 'default' => NULL, 'description' => "Measurement specifying a list of dimensions for an irregular space.", 'group' => 'Listing:Property:Rooms'),
  'living_room_level_or_floor' => array('type' => 'varchar', 'length' => 25, 'not null' => FALSE, 'default' => NULL, 'description' => "The level or floor of the room.", 'group' => 'Listing:Property:Rooms'),
  'living_room_amenities' => array('type' => 'text', 'not null' => FALSE, 'default' => NULL, 'description' => "A pick list of amenities.", 'group' => 'Listing:Property:Rooms'),
  'living_room_description' => array('type' => 'text', 'not null' => FALSE, 'default' => NULL, 'description' => "A description of the room.", 'group' => 'Listing:Property:Rooms'),
  //family room
  'family_room_area' => array('type' => 'int', 'not null' => FALSE, 'default' => NULL, 'description' => "The square footage of the room.", 'group' => 'Listing:Property:Rooms'),
  'family_room_dimensions' => array('type' => 'varchar', 'length' => 128, 'not null' => FALSE, 'default' => NULL, 'description' => "Measurement specifying a list of dimensions for an irregular space.", 'group' => 'Listing:Property:Rooms'),
  'family_room_level_or_floor' => array('type' => 'varchar', 'length' => 25, 'not null' => FALSE, 'default' => NULL, 'description' => "The level or floor of the room.", 'group' => 'Listing:Property:Rooms'),
  'family_room_amenities' => array('type' => 'text', 'not null' => FALSE, 'default' => NULL, 'description' => "A pick list of amenities.", 'group' => 'Listing:Property:Rooms'),
  'family_room_description' => array('type' => 'text', 'not null' => FALSE, 'default' => NULL, 'description' => "A description of the room.", 'group' => 'Listing:Property:Rooms'),
  //basement
  'basement_yn' => array('type' => 'varchar', 'length' => 12, 'default' => NULL, 'not null' => FALSE, 'description' => 'Field indicating wether there is a basement present or not.', 'group' => 'Listing:Property:Rooms'),
  'basement_area' => array('type' => 'int', 'not null' => FALSE, 'default' => NULL, 'description' => "The square footage of the room.", 'group' => 'Listing:Property:Rooms'),
  'basement_dimensions' => array('type' => 'varchar', 'length' => 128, 'not null' => FALSE, 'default' => NULL, 'description' => "Measurement specifying a list of dimensions for an irregular space.", 'group' => 'Listing:Property:Rooms'),
  'basement_amenities' => array('type' => 'text', 'not null' => FALSE, 'default' => NULL, 'description' => "A pick list of amenities.", 'group' => 'Listing:Property:Rooms'),
  'basement_description' => array('type' => 'text', 'not null' => FALSE, 'default' => NULL, 'description' => "A description of the room.", 'group' => 'Listing:Property:Rooms'),
  //kitchen
  'kitchen_area' => array('type' => 'int', 'not null' => FALSE, 'default' => NULL, 'description' => "The square footage of the room.", 'group' => 'Listing:Property:Rooms'),
  'kitchen_dimensions' => array('type' => 'varchar', 'length' => 128, 'not null' => FALSE, 'default' => NULL, 'description' => "Measurement specifying a list of dimensions for an irregular space.", 'group' => 'Listing:Property:Rooms'),
  'kitchen_level_or_floor' => array('type' => 'varchar', 'length' => 25, 'not null' => FALSE, 'default' => NULL, 'description' => "The level or floor of the room.", 'group' => 'Listing:Property:Rooms'),
  'kitchen_amenities' => array('type' => 'text', 'not null' => FALSE, 'default' => NULL, 'description' => "A pick list of amenities.", 'group' => 'Listing:Property:Rooms'),
  'kitchen_description' => array('type' => 'text', 'not null' => FALSE, 'default' => NULL, 'description' => "A description of the room.", 'group' => 'Listing:Property:Rooms'),
  //master bedroom
  'master_bedroom_area' => array('type' => 'int', 'not null' => FALSE, 'default' => NULL, 'description' => "The square footage of the room.", 'group' => 'Listing:Property:Rooms'),
  'master_bedroom_dimensions' => array('type' => 'varchar', 'length' => 128, 'not null' => FALSE, 'default' => NULL, 'description' => "Measurement specifying a list of dimensions for an irregular space.", 'group' => 'Listing:Property:Rooms'),
  'master_bedroom_level_or_floor' => array('type' => 'varchar', 'length' => 25, 'not null' => FALSE, 'default' => NULL, 'description' => "The level or floor of the room.", 'group' => 'Listing:Property:Rooms'),
  'master_bedroom_amenities' => array('type' => 'text', 'not null' => FALSE, 'default' => NULL, 'description' => "A pick list of amenities.", 'group' => 'Listing:Property:Rooms'),
  'master_bedroom_description' => array('type' => 'text', 'not null' => FALSE, 'default' => NULL, 'description' => "A description of the room.", 'group' => 'Listing:Property:Rooms'),
  //bedroom 2
  'bedroom_2_area' => array('type' => 'int', 'not null' => FALSE, 'default' => NULL, 'description' => "The square footage of the room.", 'group' => 'Listing:Property:Rooms'),
  'bedroom_2_dimensions' => array('type' => 'varchar', 'length' => 128, 'not null' => FALSE, 'default' => NULL, 'description' => "Measurement specifying a list of dimensions for an irregular space.", 'group' => 'Listing:Property:Rooms'),
  'bedroom_2_level_or_floor' => array('type' => 'varchar', 'length' => 25, 'not null' => FALSE, 'default' => NULL, 'description' => "The level or floor of the room.", 'group' => 'Listing:Property:Rooms'),
  'bedroom_2_amenities' => array('type' => 'text', 'not null' => FALSE, 'default' => NULL, 'description' => "A pick list of amenities.", 'group' => 'Listing:Property:Rooms'),
  'bedroom_2_description' => array('type' => 'text', 'not null' => FALSE, 'default' => NULL, 'description' => "A description of the room.", 'group' => 'Listing:Property:Rooms'),
  //bedroom 3
  'bedroom_3_area' => array('type' => 'int', 'not null' => FALSE, 'default' => NULL, 'description' => "The square footage of the room.", 'group' => 'Listing:Property:Rooms'),
  'bedroom_3_dimensions' => array('type' => 'varchar', 'length' => 128, 'not null' => FALSE, 'default' => NULL, 'description' => "Measurement specifying a list of dimensions for an irregular space.", 'group' => 'Listing:Property:Rooms'),
  'bedroom_3_level_or_floor' => array('type' => 'varchar', 'length' => 25, 'not null' => FALSE, 'default' => NULL, 'description' => "The level or floor of the room.", 'group' => 'Listing:Property:Rooms'),
  'bedroom_3_amenities' => array('type' => 'text', 'not null' => FALSE, 'default' => NULL, 'description' => "A pick list of amenities.", 'group' => 'Listing:Property:Rooms'),
  'bedroom_3_description' => array('type' => 'text', 'not null' => FALSE, 'default' => NULL, 'description' => "A description of the room.", 'group' => 'Listing:Property:Rooms'),
  //bedroom 4
  'bedroom_4_area' => array('type' => 'int', 'not null' => FALSE, 'default' => NULL, 'description' => "The square footage of the room.", 'group' => 'Listing:Property:Rooms'),
  'bedroom_4_dimensions' => array('type' => 'varchar', 'length' => 128, 'not null' => FALSE, 'default' => NULL, 'description' => "Measurement specifying a list of dimensions for an irregular space.", 'group' => 'Listing:Property:Rooms'),
  'bedroom_4_level_or_floor' => array('type' => 'varchar', 'length' => 25, 'not null' => FALSE, 'default' => NULL, 'description' => "The level or floor of the room.", 'group' => 'Listing:Property:Rooms'),
  'bedroom_4_amenities' => array('type' => 'text', 'not null' => FALSE, 'default' => NULL, 'description' => "A pick list of amenities.", 'group' => 'Listing:Property:Rooms'),
  'bedroom_4_description' => array('type' => 'text', 'not null' => FALSE, 'default' => NULL, 'description' => "A description of the room.", 'group' => 'Listing:Property:Rooms'),
  //bedroom 5
  'bedroom_5_area' => array('type' => 'int', 'not null' => FALSE, 'default' => NULL, 'description' => "The square footage of the room.", 'group' => 'Listing:Property:Rooms'),
  'bedroom_5_dimensions' => array('type' => 'varchar', 'length' => 128, 'not null' => FALSE, 'default' => NULL, 'description' => "Measurement specifying a list of dimensions for an irregular space.", 'group' => 'Listing:Property:Rooms'),
  'bedroom_5_level_or_floor' => array('type' => 'varchar', 'length' => 25, 'not null' => FALSE, 'default' => NULL, 'description' => "The level or floor of the room.", 'group' => 'Listing:Property:Rooms'),
  'bedroom_5_amenities' => array('type' => 'text', 'not null' => FALSE, 'default' => NULL, 'description' => "A pick list of amenities.", 'group' => 'Listing:Property:Rooms'),
  'bedroom_5_description' => array('type' => 'text', 'not null' => FALSE, 'default' => NULL, 'description' => "A description of the room.", 'group' => 'Listing:Property:Rooms'),
  //bathroom master
  'master_bathroom_yn' => array('type' => 'varchar', 'length' => 12, 'default' => NULL, 'not null' => FALSE, 'description' => 'Field indicating wether there is a Master Bathroom present or not.', 'group' => 'Listing:Property:Rooms'),
  'master_bathroom_area' => array('type' => 'int', 'not null' => FALSE, 'default' => NULL, 'description' => "The square footage of the room.", 'group' => 'Listing:Property:Rooms'),
  'master_bathroom_dimensions' => array('type' => 'varchar', 'length' => 128, 'not null' => FALSE, 'default' => NULL, 'description' => "Measurement specifying a list of dimensions for an irregular space.", 'group' => 'Listing:Property:Rooms'),
  'master_bathroom_level_or_floor' => array('type' => 'varchar', 'length' => 25, 'not null' => FALSE, 'default' => NULL, 'description' => "The level or floor of the room.", 'group' => 'Listing:Property:Rooms'),
  'master_bathroom_amenities' => array('type' => 'text', 'not null' => FALSE, 'default' => NULL, 'description' => "A pick list of amenities.", 'group' => 'Listing:Property:Rooms'),
  'master_bathroom_description' => array('type' => 'text', 'not null' => FALSE, 'default' => NULL, 'description' => "A description of the room.", 'group' => 'Listing:Property:Rooms'),
  //den
  'den_area' => array('type' => 'int', 'not null' => FALSE, 'default' => NULL, 'description' => "The square footage of the room.", 'group' => 'Listing:Property:Rooms'),
  'den_dimensions' => array('type' => 'varchar', 'length' => 128, 'not null' => FALSE, 'default' => NULL, 'description' => "Measurement specifying a list of dimensions for an irregular space.", 'group' => 'Listing:Property:Rooms'),
  'den_level_or_floor' => array('type' => 'varchar', 'length' => 25, 'not null' => FALSE, 'default' => NULL, 'description' => "The level or floor of the room.", 'group' => 'Listing:Property:Rooms'),
  'den_amenities' => array('type' => 'text', 'not null' => FALSE, 'default' => NULL, 'description' => "A pick list of amenities.", 'group' => 'Listing:Property:Rooms'),
  'den_description' => array('type' => 'text', 'not null' => FALSE, 'default' => NULL, 'description' => "A description of the room.", 'group' => 'Listing:Property:Rooms'),
  //office
  'office_area' => array('type' => 'int', 'not null' => FALSE, 'default' => NULL, 'description' => "The square footage of the room.", 'group' => 'Listing:Property:Rooms'),
  'office_dimensions' => array('type' => 'varchar', 'length' => 128, 'not null' => FALSE, 'default' => NULL, 'description' => "Measurement specifying a list of dimensions for an irregular space.", 'group' => 'Listing:Property:Rooms'),
  'office_level_or_floor' => array('type' => 'varchar', 'length' => 25, 'not null' => FALSE, 'default' => NULL, 'description' => "The level or floor of the room.", 'group' => 'Listing:Property:Rooms'),
  'office_amenities' => array('type' => 'text', 'not null' => FALSE, 'default' => NULL, 'description' => "A pick list of amenities.", 'group' => 'Listing:Property:Rooms'),
  'office_description' => array('type' => 'text', 'not null' => FALSE, 'default' => NULL, 'description' => "A description of the room.", 'group' => 'Listing:Property:Rooms'),
  //great room
  'great_room_area' => array('type' => 'int', 'not null' => FALSE, 'default' => NULL, 'description' => "The square footage of the room.", 'group' => 'Listing:Property:Rooms'),
  'great_room_dimensions' => array('type' => 'varchar', 'length' => 128, 'not null' => FALSE, 'default' => NULL, 'description' => "Measurement specifying a list of dimensions for an irregular space.", 'group' => 'Listing:Property:Rooms'),
  'great_room_level_or_floor' => array('type' => 'varchar', 'length' => 25, 'not null' => FALSE, 'default' => NULL, 'description' => "The level or floor of the room.", 'group' => 'Listing:Property:Rooms'),
  'great_room_amenities' => array('type' => 'text', 'not null' => FALSE, 'default' => NULL, 'description' => "A pick list of amenities.", 'group' => 'Listing:Property:Rooms'),
  'great_room_description' => array('type' => 'text', 'not null' => FALSE, 'default' => NULL, 'description' => "A description of the room.", 'group' => 'Listing:Property:Rooms'),
  //utility room
  'utility_room_area' => array('type' => 'int', 'not null' => FALSE, 'default' => NULL, 'description' => "The square footage of the room.", 'group' => 'Listing:Property:Rooms'),
  'utility_room_dimensions' => array('type' => 'varchar', 'length' => 128, 'not null' => FALSE, 'default' => NULL, 'description' => "Measurement specifying a list of dimensions for an irregular space.", 'group' => 'Listing:Property:Rooms'),
  'utility_room_level_or_floor' => array('type' => 'varchar', 'length' => 25, 'not null' => FALSE, 'default' => NULL, 'description' => "The level or floor of the room.", 'group' => 'Listing:Property:Rooms'),
  'utility_room_amenities' => array('type' => 'text', 'not null' => FALSE, 'default' => NULL, 'description' => "A pick list of amenities.", 'group' => 'Listing:Property:Rooms'),
  'utility_room_description' => array('type' => 'text', 'not null' => FALSE, 'default' => NULL, 'description' => "A description of the room.", 'group' => 'Listing:Property:Rooms'),
  //laundry
  'laundry_area' => array('type' => 'int', 'not null' => FALSE, 'default' => NULL, 'description' => "The square footage of the room.", 'group' => 'Listing:Property:Rooms'),
  'laundry_dimensions' => array('type' => 'varchar', 'length' => 128, 'not null' => FALSE, 'default' => NULL, 'description' => "Measurement specifying a list of dimensions for an irregular space.", 'group' => 'Listing:Property:Rooms'),
  'laundry_level_or_floor' => array('type' => 'varchar', 'length' => 25, 'not null' => FALSE, 'default' => NULL, 'description' => "The level or floor of the room.", 'group' => 'Listing:Property:Rooms'),
  'laundry_amenities' => array('type' => 'text', 'not null' => FALSE, 'default' => NULL, 'description' => "A pick list of amenities.", 'group' => 'Listing:Property:Rooms'),
  'laundry_description' => array('type' => 'text', 'not null' => FALSE, 'default' => NULL, 'description' => "A description of the room.", 'group' => 'Listing:Property:Rooms'),
  //other room
  'other_room_area' => array('type' => 'int', 'not null' => FALSE, 'default' => NULL, 'description' => "The square footage of the room.", 'group' => 'Listing:Property:Rooms'),
  'other_room_dimensions' => array('type' => 'varchar', 'length' => 128, 'not null' => FALSE, 'default' => NULL, 'description' => "Measurement specifying a list of dimensions for an irregular space.", 'group' => 'Listing:Property:Rooms'),
  'other_room_level_or_floor' => array('type' => 'varchar', 'length' => 25, 'not null' => FALSE, 'default' => NULL, 'description' => "The level or floor of the room.", 'group' => 'Listing:Property:Rooms'),
  'other_room_amenities' => array('type' => 'text', 'not null' => FALSE, 'default' => NULL, 'description' => "A pick list of amenities.", 'group' => 'Listing:Property:Rooms'),
  'other_room_description' => array('type' => 'text', 'not null' => FALSE, 'default' => NULL, 'description' => "A description of the room.", 'group' => 'Listing:Property:Rooms'),
  //water
  'lake_or_river_name' => array('type' => 'varchar', 'length' => 50, 'not null' => FALSE, 'default' => NULL, 'description' => "The name of the body of water this property is adjacent to.", 'group' => 'Listing:Property'),
  'lake_front_footage' => array('type' => 'varchar', 'length' => 25, 'not null' => FALSE, 'default' => NULL, 'description' => "The footage of water front access.", 'group' => 'Listing:Property'),
  //sale or rent
  'SaleOrRent' => array('type' => 'varchar', 'length' => 25, 'not null' => FALSE, 'default' => NULL, 'description' => "A descriptor indicating if this property is for sale or rent.", 'group' => 'Listing:Property'),
  //misc
  'idx_include' => array('type' => 'varchar', 'length' => 8, 'not null' => FALSE, 'default' => NULL, 'description' => "A descriptor indicating if this property is allowed to be displayed in an IDX.", 'group' => 'Listing:Property'),
  'picture_count' => array('type' => 'int', 'unsigned' => TRUE, 'not null' => FALSE, 'default' => 0, 'description' => "The number of photographs / pictures associated with the property.", 'group' => 'Listing:Property'),
  'import_or_manual' => array('type' => 'varchar', 'length' => 30, 'not null' => TRUE, 'default' => 'import', 'description' => "Indicates whether the property has been imported or added manually.", 'group' => 'Listing:Property'),
  'raw_mls_data' => array('type' => 'text', 'not null' => FALSE, 'description' => "Raw data of property pulled in from MLS"),
      ) + entity_exportable_schema_fields(),
      'primary key' => array('id'),
          //'unique keys' => array('name' => array('name')),
  );

  return $schema;
}

/**
 * Remove unique constraint on drealty_listing.name field
 */
function drealty_update_7000() {
  $items = array();

  $items[] = db_query("ALTER TABLE {drealty_listing} DROP INDEX name");

  return $items;
}

/**
 * Create drealty_external_photos table
 */
function drealty_update_7001() {
  $items = array();
  $items[] = db_query("CREATE TABLE {drealty_external_photos} (
    id         INT UNSIGNED NOT NULL PRIMARY KEY AUTO_INCREMENT,
    conid      INT UNSIGNED NOT NULL,
    listing_id INT UNSIGNED NOT NULL,
    photo_url  varchar(255) NOT NULL DEFAULT ''
  )");

  $items[] = db_query("ALTER TABLE {drealty_classes} ADD COLUMN download_images INT UNSIGNED NOT NULL DEFAULT 0");
  $items[] = db_query("UPDATE {drealty_classes} SET download_images = 1 WHERE process_images = 1");

  $items[] = db_query("ALTER TABLE {drealty_listing} ADD COLUMN download_images INT UNSIGNED NOT NULL DEFAULT 0");
  $items[] = db_query("UPDATE {drealty_listing} SET download_images = 1 WHERE process_images = 1");

  return $items;
}

/**
 * Add format field to drealty_classes
 */
function drealty_update_7002() {
  $items = array();

  $items[] = db_query("ALTER TABLE {drealty_classes} ADD COLUMN format VARCHAR(255) NOT NULL DEFAULT 'COMPACT-DECODED'");

  return $items;
}

/**
 * Increase size of listings zip code column so it doesn't get truncated 
 */
function drealty_update_7003() {
  $items = array();

  $items[] = db_query("ALTER TABLE {drealty_listing} MODIFY postal_code VARCHAR(60)");

  return $items;
}

/**
 * Add "import or manual" field to track source of listings
 */
function drealty_update_7004() {
  $items = array();

  $items[] = db_query("ALTER TABLE {drealty_listing} ADD COLUMN import_or_manual VARCHAR(30) NOT NULL DEFAULT 'import'");

  return $items;
}

/**
 * Add rental_price to drealty_listing table
 */
function drealty_update_7005() {
  $items = array();

  $items[] = db_query("ALTER TABLE {drealty_listing} ADD COLUMN rental_price INT NOT NULL DEFAULT 0");

  return $items;
}

/**
 * Add property_type to drealty_listing table
 */
function drealty_update_7006() {
  $items = array();

  $items[] = db_query("ALTER TABLE {drealty_listing} ADD COLUMN property_type VARCHAR(60) NULL");

  return $items;
}

/**
 * Increase size of listing_key column.
 */
function drealty_update_7007() {
  $items = array();

  $items[] = db_query("ALTER TABLE {drealty_listing} MODIFY listing_key VARCHAR(60)");

  return $items;
}

/**
 * Increase size of list_agent_mls_id column.
 */
function drealty_update_7008() {
  $items = array();

  $items[] = db_query("ALTER TABLE {drealty_listing} MODIFY list_agent_mls_id VARCHAR(60)");

  return $items;
}

/**
 * Increase size of bank_owned column. Add a raw_mls_data column
 */
function drealty_update_7009() {
  $items = array();

  $items[] = db_query("ALTER TABLE {drealty_listing} MODIFY bank_owned VARCHAR(60)");
  $items[] = db_query("ALTER TABLE {drealty_listing} ADD raw_mls_data TEXT NULL");

  return $items;
}
