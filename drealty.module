<?php

define('OFFSET', 268435456);
define('RADIUS', 85445659.4471); /* $offset / pi() */

function drealty_entity_info() {
  $entities = array();
  $entities['drealty_listing'] = array(
      'label' => t('dRealty Listing'),
      'entity class' => 'DrealtyListing',
      'controller class' => 'DrealtyListingController',
      'token type' => 'drealty_listing',
      'base table' => 'drealty_listing',
      'uri callback' => 'entity_class_uri',
      'fieldable' => TRUE,
      'view modes' => array(
          'full' => array(
              'label' => 'Full View',
              'custom settings' => FALSE,
          ),
          'search' => array(
              'label' => 'Search View',
              'custom settings' => TRUE,
          ),
          'list' => array(
              'label' => 'List View',
              'custom settings' => TRUE,
          ),
      ),
      'bundles' => array(
          'drealty_listing' => array(
              'label' => t('dRealty Listing'),
              'admin' => array(
                  'path' => 'admin/drealty/structure/drealty_listing',
              ),
          ),
      ),
      'entity keys' => array(
          'id' => 'id',
          'label' => 'name',
      ),
      'admin ui' => array(
          'path' => 'admin/content/drealty_listings',
          'file' => 'drealty_listing.admin.inc',
          'controller class' => 'DrealtyListingUIController',
          'menu wildcard' => '%drealty_listing',
      ),
      'module' => 'drealty',
      'access callback' => 'drealty_connection_entity_access',
  );

  $entities['drealty_openhouse'] = array(
      'label' => t('dRealty OpenHouse'),
      'entity class' => 'DrealtyOpenHouse',
      'controller class' => 'DrealtyOpenHouseController',
      'base table' => 'drealty_openhouse',
      'uri callback' => 'entity_class_uri',
      'fieldable' => TRUE,
      'view modes' => array(
          'full' => array(
              'label' => 'Full View',
              'custom settings' => FALSE,
          ),
          'search' => array(
              'label' => 'Search View',
              'custom settings' => TRUE,
          ),
          'list' => array(
              'label' => 'List View',
              'custom settings' => TRUE,
          ),
          'block' => array(
              'label' => 'Block View',
              'custom settings' => TRUE,
          ),
      ),
      'bundles' => array(
          'drealty_openhouse' => array(
              'label' => t('dRealty Open House'),
              'admin' => array(
                  'path' => 'admin/drealty/structure/drealty_openhouse',
              ),
          ),
      ),
      'entity keys' => array(
          'id' => 'id',
          'label' => 'name',
      ),
      'admin ui' => array(
          'path' => 'admin/content/drealty_openhouses',
          'file' => 'drealty_openhouse.admin.inc',
          'controller class' => 'DrealtyOpenHouseUIController',
          'menu wildcard' => '%drealty_openhouse',
      ),
      'module' => 'drealty',
      'access callback' => 'drealty_connection_entity_access',
  );

  $entities['drealty_agent'] = array(
      'label' => t('dRealty Agent'),
      'entity class' => 'DrealtyAgent',
      'controller class' => 'DrealtyAgentController',
      'base table' => 'drealty_agent',
      'uri callback' => 'entity_class_uri',
      'label callback' => 'entity_class_label',
      'fieldable' => TRUE,
      'view modes' => array(
          'full' => array(
              'label' => 'Full View',
              'custom settings' => FALSE,
          ),
          'search' => array(
              'label' => 'Search View',
              'custom settings' => TRUE,
          ),
          'list' => array(
              'label' => 'List View',
              'custom settings' => TRUE,
          ),
          'block' => array(
              'label' => 'Block View',
              'custom settings' => TRUE,
          ),
      ),
      'bundles' => array(
          'drealty_agent' => array(
              'label' => t('dRealty Agent'),
              'admin' => array(
                  'path' => 'admin/drealty/structure/drealty_agent',
              ),
          ),
      ),
      'entity keys' => array(
          'id' => 'id',
      ),
      'admin ui' => array(
          'path' => 'admin/content/drealty_agents',
          'file' => 'drealty_agent.admin.inc',
          'controller class' => 'DrealtyAgentUIController',
          'menu wildcard' => '%drealty_agent',
      ),
      'module' => 'drealty',
      'access callback' => 'drealty_connection_entity_access',
  );

  $entities['drealty_office'] = array(
      'label' => t('dRealty Office'),
      'entity class' => 'DrealtyOffice',
      'controller class' => 'DrealtyOfficeController',
      'base table' => 'drealty_office',
      'uri callback' => 'entity_class_uri',
      'fieldable' => TRUE,
      'view modes' => array(
          'full' => array(
              'label' => 'Full View',
              'custom settings' => FALSE,
          ),
          'search' => array(
              'label' => 'Search View',
              'custom settings' => TRUE,
          ),
          'list' => array(
              'label' => 'List View',
              'custom settings' => TRUE,
          ),
      ),
      'bundles' => array(
          'drealty_office' => array(
              'label' => t('dRealty Office'),
              'admin' => array(
                  'path' => 'admin/drealty/structure/drealty_office',
              ),
          ),
      ),
      'entity keys' => array(
          'id' => 'id',
      ),
      'admin ui' => array(
          'path' => 'admin/content/drealty_offices',
          'file' => 'drealty_office.admin.inc',
          'controller class' => 'DrealtyOfficeUIController',
          'menu wildcard' => '%drealty_office',
      ),
      'module' => 'drealty',
      'access callback' => 'drealty_connection_entity_access',
  );

  $entities['drealty_connection_entity'] = array(
      'label' => t('dRealty Connection'),
      'entity class' => 'dRealtyConnectionEntity',
      'controller class' => 'dRealtyConnectionEntityContoller',
      'exportable' => TRUE,
      'fieldable' => FALSE,
      'base table' => 'drealty_connections',
      'entity keys' => array(
          'id' => 'conid',
          'label' => 'name',
          'name' => 'name'
      ),
      'module' => 'drealty',
      'access callback' => 'drealty_connection_entity_access',
      'admin ui' => array(
          'path' => 'admin/drealty/connections',
          'file' => 'drealty_connection.admin.inc',
          'controller class' => 'DrealtyConnectionUIController',
      ),
  );

  return $entities;
}

/**
 * Implements hook_token_info().
 */
function drealty_token_info() {
  $blah = entity_get_info();
  $type = array(
      'name' => t('dRealty Listing'),
      'description' => t('Tokens related to individual content items, or "Listings".'),
      'needs-data' => 'drealty_listing',
  );

  // Core tokens for nodes.
  $listing['id'] = array(
      'name' => t("ID"),
      'description' => t('The unique ID of the Listing.'),
  );

  $listing['listing_key'] = array(
      'name' => t("Listing Key"),
      'description' => t('The unique ID of the Listing from the MLS.'),
  );

  $listing['listing_id'] = array(
      'name' => t("Listing ID"),
      'description' => t('The Human ID of the Listing from the MLS.'),
  );
  $listing['public_remarks'] = array(
      'name' => t('Public Remarks'),
      'description' => t('The public remarks associated with the listing.')
  );

  return array(
      'types' => array('drealty_listing' => $type),
      'tokens' => array('drealty_listing' => $listing),
  );
}

/**
 * Implements hook_tokens().
 */
function drealty_tokens($type, $tokens, array $data = array(), array $options = array()) {
  $url_options = array('absolute' => TRUE);
  if (isset($options['language'])) {
    $url_options['language'] = $options['language'];
    $language_code = $options['language']->language;
  } else {
    $language_code = NULL;
  }
  $sanitize = !empty($options['sanitize']);

  $replacements = array();

  if ($type == 'drealty_listing' && !empty($data['drealty_listing'])) {
    $listing = $data['drealty_listing'];

    foreach ($tokens as $name => $original) {
      switch ($name) {
        // Simple key values on the node.
        case 'id':
          $replacements[$original] = $listing->id;
          break;

        case 'listing_id':
          $replacements[$original] = $listing->listing_id;
          break;

        case 'listing_key':
          $replacements[$original] = $listing->listing_key;
          break;
      }
    }
  }

  return $replacements;
}

/**
 * Implements hook_ctools_plugin_directory().
 *
 * It simply tells panels where to find the .inc files that define various
 * args, contexts, content_types. In this case the subdirectories of
 * ctools_plugin_example/panels are used.
 */
function drealty_ctools_plugin_directory($module, $plugin) {
  if ($module == 'ctools' && !empty($plugin)) {
    return "plugins/$plugin";
  }
}

function drealty_connection_entity_access($op, $type = NULL, $account = NULL) {
  return TRUE;
}

function drealty_menu_alter(&$items) {
  $items['admin/drealty/structure/drealty_office/fields']['title'] = "Manage Office Fields";
  $items['admin/drealty/structure/drealty_agent/fields']['title'] = "Manage Agent Fields";
  $items['admin/drealty/structure/drealty_listing/fields']['title'] = "Manage Listing Fields";
  $items['admin/drealty/structure/drealty_openhouse/fields']['title'] = "Manage Open House Fields";

  $items['admin/drealty/structure/drealty_office/display']['title'] = "Manage Office Display";
  $items['admin/drealty/structure/drealty_agent/display']['title'] = "Manage Agent Display";
  $items['admin/drealty/structure/drealty_listing/display']['title'] = "Manage Listing Display";
  $items['admin/drealty/structure/drealty_openhouse/display']['title'] = "Manage Open House Display";
}

function drealty_menu() {
  $items = array();
  $items['admin/drealty'] = array(
      'title' => 'dRealty',
      'description' => 'Manage the dRealty Installation.',
      'page callback' => 'drealty_management_page',
      'access arguments' => array('access administration pages'),
      'type' => MENU_NORMAL_ITEM,
  );

  $items['admin/drealty/settings'] = array(
      'title' => 'dRealty Settings',
      'description' => t('Configuration settings for dRealty'),
      'access arguments' => array('access administration pages'),
      'page callback' => 'drupal_get_form',
      'page arguments' => array('drealty_settings_form'),
      'file' => 'drealty.admin.inc',
      'type' => MENU_NORMAL_ITEM,
  );
  $items['admin/drealty/structure'] = array(
      'title' => t('dRealty Entity Types Field Management'),
      'access arguments' => array('access administration pages'),
      'page callback' => 'drealty_types_form',
      'type' => MENU_NORMAL_ITEM,
  );
  $items['admin/drealty/fields_autocomplete/%/%/%'] = array(
      'title' => 'Autocomplete for fields',
      'page callback' => '_fields_autocomplete',
      'page arguments' => array(3, 4, 5),
      'access callback' => TRUE,
      'type' => MENU_CALLBACK
  );

  $items['listings/map'] = array(
      'title' => 'Search Map',
      'page callback' => 'drealty_listing_map',
      'access callback' => TRUE,
      'type' => MENU_NORMAL_ITEM,
  );

  $items['drealty/js/map'] = array(
      'page callback' => 'drealty_listing_map_get_listings',
      'access callback' => TRUE,
      'type' => MENU_CALLBACK,
  );


  return $items;
}

function drealty_management_page() {
  $path = drupal_get_path('module', 'drealty') . "/css/drealty.admin.css";
  drupal_add_css($path, array('type' => 'file'));

  $content = '';
  $content .= "<div class='section'>";
  $content .= "<h3>dRealty RETS Configuration</h3>";
  $content .= "<div class='description'>Use the adminstration sections below to configure one or more RETs connections.</div>";
  $content .= "<div>";
  $content .= l('dRealty Connections', 'admin/drealty/connections');
  $content .= "<div class='description'>Manage dRealty Connections</div>";
  $content .= "</div>";

  $content .= "<div>";
  $content .= l('dRealty Settings', 'admin/drealty/settings');
  $content .= "<div class='description'>Manage dRealty Global Settings</div>";
  $content .= "</div>";
  $content .= "</div>";

  $content .= "<div class='section'>";
  $content .= "<h3>dRealty Entity Field Configuration</h3>";
  $content .= "<div class='description'>Use the adminstration sections below to add | remove | manage fields for the various dRealty Entities via Drupal's Core Field API.</div>";
  $content .= "<div><strong>dRealty Listings</strong></div>";
  $content .= "<div>" . l("Manage Fields", "admin/drealty/structure/drealty_listing/fields") . ' | ' . l("Manage Display", "admin/drealty/structure/drealty_listing/display") . '</div>';
  $content .= "<div><strong>dRealty Open Houses</strong></div>";
  $content .= "<div>" . l("Manage Fields", "admin/drealty/structure/drealty_openhouse/fields") . ' | ' . l("Manage Display", "admin/drealty/structure/drealty_openhouse/display") . '</div>';
  $content .= "<div><strong>dRealty Agents</strong></div>";
  $content .= "<div>" . l("Manage Fields", "admin/drealty/structure/drealty_agent/fields") . ' | ' . l("Manage Display", "admin/drealty/structure/drealty_agent/display") . '</div>';
  $content .= "<div><strong>dRealty Offices</strong></div>";
  $content .= "<div>" . l("Manage Fields", "admin/drealty/structure/drealty_office/fields") . ' | ' . l("Manage Display", "admin/drealty/structure/drealty_office/display") . '</div>';
  $content .= "</div>";

  return $content;
}

function drealty_listing_map() {
  $listings = entity_load('drealty_listing');
  drupal_add_js('http://maps.googleapis.com/maps/api/js?sensor=false', array('type' => 'external'));
  $module_path = drupal_get_path('module', 'drealty');
  drupal_add_js($module_path . '/js/drealty.search.map.js', array('type' => 'file'));
  return theme('drealty_search_map', $listings);
}

function drealty_listing_map_get_listings() {

  $bb = $_REQUEST['bounding_box'];

  $lat_condition = $bb['south_west']['lat'] . ' AND ' . $bb['north_east']['lat'];
  $lon_condition = $bb['south_west']['lng'] . ' AND ' . $bb['north_east']['lng'];

  $markers = db_select('drealty_listing', 'l')
    ->fields('l', array('latitude', 'longitude', 'id', 'listing_id'))
    ->where("(latitude BETWEEN $lat_condition) AND (longitude BETWEEN $lon_condition)")
    ->execute()
    ->fetchAllAssoc('listing_id');


  $clustered = array();

  while (count($markers)) {
    $marker = array_pop($markers);
    $cluster = array();
    foreach ($markers as $key => $target) {
      $pixels = pixelDistance($marker->latitude, $marker->longitude, $target->latitude, $target->longitude, $bb['zoom']);
      if ($bb['distance'] > $pixels) {
        unset($markers[$key]);
        $cluster[] = $target;
      }
    }

    if (count($cluster) > 0) {
      $cluster[] = $marker;
      $data['count'] = count($cluster) + 1;
      $data['center']['lat'] = $marker->latitude;
      $data['center']['lng'] = $marker->longitude;
      $data['markers'] = $cluster;
      $clustered[] = $data;
    } else {
      $cluster[] = $marker;
      $data['count'] = 1;
      $data['center']['lat'] = $marker->latitude;
      $data['center']['lng'] = $marker->longitude;
      $data['markers'] = $cluster;
      $clustered[] = $data;
    }
  }

  print drupal_json_encode($clustered);
  exit();
}

function lonToX($lon) {
  return round(OFFSET + RADIUS * $lon * pi() / 180);
}

function latToY($lat) {
  return round(OFFSET - RADIUS *
      log((1 + sin($lat * pi() / 180)) /
        (1 - sin($lat * pi() / 180))) / 2);
}

function pixelDistance($lat1, $lon1, $lat2, $lon2, $zoom) {
  $x1 = lonToX($lon1);
  $y1 = latToY($lat1);

  $x2 = lonToX($lon2);
  $y2 = latToY($lat2);

  return sqrt(pow(($x1 - $x2), 2) + pow(($y1 - $y2), 2)) >> (21 - $zoom);
}

function drealty_class_load($cid) {
  $dr = new drealtyResources();
  return $dr->FetchClass($cid);
}

function _fields_autocomplete($conid, $class, $string) {
  if ($conid == NULL) {
    exit();
  }

  $matches = array();
  //$result = db_query("SELECT * FROM {drealty_fields} WHERE conid = :conid AND resource = :resource AND display = 1", array(':conid' => $conid, ':resource' => $resource))->fetchAll();
  //$result = db_query("SELECT fid, systemname, longname FROM {drealty_fields} WHERE LOWER(longname) LIKE LOWER(:pattern) AND conid = :conid", array('::pattern' => db_like($string), ':conid' => $conid));
  $ored = db_or();
  $ored
    ->condition('systemname', '%' . strtolower($string) . '%', 'LIKE')
    ->condition('longname', '%' . strtolower($string) . '%', 'LIKE');

  $anded = db_and();
  $anded
    ->condition('conid', $conid)
    ->condition('classes', '%' . $class . '%', 'LIKE');

  $results = db_select('drealty_fields', 'f')
    ->fields('f')
    ->condition($anded)
    ->condition($ored)
    ->execute()
    ->fetchAll();

  foreach ($results as $data) {
    $matches[$data->systemname . ' - ' . $data->longname] = $data->systemname . ' - ' . $data->longname;
  }
  print drupal_json_encode($matches);
  //print drupal_to_js($matches);
  exit();
}

function drealty_sentence_case($string) {
  $sentences = preg_split('/([.?!]+)/', $string, -1, PREG_SPLIT_NO_EMPTY | PREG_SPLIT_DELIM_CAPTURE);
  $new_string = '';
  foreach ($sentences as $key => $sentence) {
    $new_string .= ($key & 1) == 0 ?
      ucfirst(strtolower(trim($sentence))) :
      $sentence . ' ';
  }
  return trim($new_string);
}

function drealty_word_limit($text, $limit=40) {
  $explode = explode(' ', $text);
  $string = '';

  $dots = '...';
  if (count($explode) <= $limit) {
    $dots = '';
  }
  for ($i = 0; $i < $limit; $i++) {
    $string .= $explode[$i] . " ";
  }
  if ($dots) {
    $string = substr($string, 0, strlen($string));
  }

  return "$string $dots";
}

function drealty_geocode($address) {

  static $libraries = FALSE;

  $address = str_replace(" ", "+", $address);
  $url = "http://open.mapquestapi.com/nominatim/v1/search?format=json&exclude_place_ids=&accept-language=en-us,en;q=0.5&polygon=1&addressdetails=1&q=$address";
  $ch = curl_init();
  curl_setopt($ch, CURLOPT_URL, $url);
  curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);
  $buffer = curl_exec($ch);
  curl_close($ch);
  $result = json_decode($buffer);

  $latlon = new stdClass();
  $latlon->success = FALSE;

  if (isset($result[0])) {
    $latlon->lat = $result[0]->lat;
    $latlon->lon = $result[0]->lon;
    $latlon->success = TRUE;
  } else {
    if (!$libraries) {
      $libraries = libraries_get_libraries();
    }
    if (array_key_exists("geoPHP", $libraries)) {
      $geometry = geocoder('google', $address);
      if (isset($geometry)) {
        $centroid = $geometry->getCentroid();
        $latlon->lat = $centroid->getY();
        $latlon->lon = $centroid->getX();
        $latlon->success = TRUE;
      }
    }
  }
  return $latlon;
}

function drealty_load_phrets() {
  static $static_cache = FALSE;
  if (!$static_cache) {
    $path = libraries_get_path('phRets');
    $file = $path . '/phRets.php';
    if (file_exists($file)) {
      if (include_once($file)) {
        $static_cache = $file;
      }
    }
  }
  return $static_cache;
}

function drealty_types_form($form, &$form_state) {

  $path = drupal_get_path('module', 'drealty') . "/css/drealty.admin.css";
  drupal_add_css($path, array('type' => 'file'));

  $content .= "<div class='section'>";
  $content .= "<h3>dRealty Entity Field Configuration</h3>";
  $content .= "<div class='description'>Use the adminstration sections below to manage fields for the various dRealty Entities.</div>";
  $content .= "<div><strong>dRealty Listings</strong></div>";
  $content .= "<div>" . l("Manage Fields", "admin/drealty/structure/drealty_listing/fields") . ' | ' . l("Manage Display", "admin/drealty/structure/drealty_listing/display") . '</div>';
  $content .= "<div><strong>dRealty Open Houses</strong></div>";
  $content .= "<div>" . l("Manage Fields", "admin/drealty/structure/drealty_openhouse/fields") . ' | ' . l("Manage Display", "admin/drealty/structure/drealty_openhouse/display") . '</div>';
  $content .= "<div><strong>dRealty Agents</strong></div>";
  $content .= "<div>" . l("Manage Fields", "admin/drealty/structure/drealty_agent/fields") . ' | ' . l("Manage Display", "admin/drealty/structure/drealty_agent/display") . '</div>';
  $content .= "<div><strong>dRealty Offices</strong></div>";
  $content .= "<div>" . l("Manage Fields", "admin/drealty/structure/drealty_office/fields") . ' | ' . l("Manage Display", "admin/drealty/structure/drealty_office/display") . '</div>';
  $content .= "</div>";

  return $content;
}

function drealty_connection_entity_save(dRealtyConnectionEntity $connection) {
  return $connection->save();
}

function drealty_help($path, $arg) {
  switch ($path) {
    case "admin/help#drealty":
      return '<p>' . t("RETS enabled Real Estate IDX solution for Drupal.") . '</p>';
      break;
  }
}

/**
 * Implements hook_permission().
 */
function drealty_permission() {
  // We set up permisssions to manage entity types, manage all entities and the
  // permissions for each individual entity
  $permissions = array(
      'administer connections' => array(
          'title' => t('Administer model types'),
          'description' => t('Create and delete fields for model types, and set their permissions.'),
      ),
      'administer listings' => array(
          'title' => t('Administer models'),
          'description' => t('Edit and delete all models'),
      ),
  );

  return $permissions;
}

/**
 * Determines whether the given user has access to a model.
 *
 * @param $op
 *   The operation being performed. One of 'view', 'update', 'create', 'delete'
 *   or just 'edit' (being the same as 'create' or 'update').
 * @param $model
 *   Optionally a model or a model type to check access for. If nothing is
 *   given, access for all models is determined.
 * @param $account
 *   The user to check for. Leave it to NULL to check for the global user.
 * @return boolean
 *   Whether access is allowed or not.
 */
function drealty_listing_access($op, $listing = NULL, $account = NULL) {
  return TRUE;
}

function drealty_openhouse_access($op, $openhouse = NULL, $account = NULL) {
  return TRUE;
}

function drealty_agent_access($op, $agent = NULL, $account = NULL) {
  return TRUE;
}

function drealty_office_access($op, $office = NULL, $account = NULL) {
  return TRUE;
}

/**
 * Implements hook_title_callback().
 *
 * @param string $resource_type
 * @param int $conid
 * @return none
 */
function drealty_resource_title_callback($resource_type, $conid) {
  $dc = new drealtyConnection();
  $connections = $dc->FetchConnections();
  $connection_name = $connections[$conid]->name;
  return t('@connection - Configure @resource Resources', array('@connection' => $connection_name, '@resource' => ucwords(str_replace("_", " ", $resource_type))));
}

/**
 * Implements hook_theme().
 */
function drealty_theme($existing, $type, $theme, $path) {
  $themes = array();

  $themes['drealty_classes_form'] = array(
      'render element' => 'form',
      'file' => 'drealty_connection.admin.inc',
  );

  $themes['drealty_fields_form'] = array(
      'render element' => 'form',
      'file' => 'drealty_connection.admin.inc',
  );

  $themes['drealty_general_setting_form'] = array(
      'render element' => 'form',
      'file' => 'drealty.admin.inc',
  );

  $themes['views_view_field__active'] = array(
      'template' => 'views/views-view-field--active',
      'original hook' => 'views_view',
      'preprocess functions' => array(
          'template_preprocess',
          'template_preprocess_views_view',
      ),
      'arguments' => array('view' => NULL),
  );

  $themes['drealty_listing'] = array(
      'render element' => 'elements',
      'template' => 'templates/drealty-listing',
  );

  $themes['drealty_agent'] = array(
      'render element' => 'elements',
      'template' => 'templates/drealty-agent',
  );

  $themes['drealty_listing__drealty_listing__search'] = array(
      'render element' => 'elements',
      'template' => 'templates/drealty-listing--search',
  );

  $themes['drealty_mls_images'] = array(
      'variables' => array('mls_images', 'listing' => NULL),
      'template' => 'templates/drealty-mls-images',
  );



  $themes['drealty_search_map'] = array(
      'variables' => array('listings' => null),
      'template' => 'templates/drealty-search-map',
  );


  return $themes;
}

function drealty_office_load($office_mlsid, $reset = FALSE) {
  $query = new EntityFieldQuery();
  $result = $query
    ->entityCondition('entity_type', 'drealty_office')
    ->propertyCondition('office_id', $office_mlsid)
    ->execute();

  return reset(entity_load('drealty_office', array_keys($result['drealty_office']), array(), $reset));
}

function drealty_agent_load($agent_name, $reset = FALSE) {
  $name = explode("_", $agent_name);
  $query = new EntityFieldQuery();
  $result = $query
    ->entityCondition('entity_type', 'drealty_agent')
    ->propertyCondition('first_name', $name[0])
    ->propertyCondition('last_name', $name[1])
    ->execute();

  return reset(entity_load('drealty_agent', array_keys($result['drealty_agent']), array(), $reset));
}

function drealty_openhouse_load($listing_mlsid, $reset = FALSE) {
  $query = new EntityFieldQuery();
  $result = $query
    ->entityCondition('entity_type', 'drealty_openhouse')
    ->propertyCondition('listing_id', $listing_mlsid)
    ->execute();

  return reset(entity_load('drealty_openhouse', array_keys($result['drealty_openhouse']), array(), $reset));
}

function drealty_listing_load($listing_mlsid, $reset = FALSE) {
  $query = new EntityFieldQuery();
  $result = $query
    ->entityCondition('entity_type', 'drealty_listing')
    ->propertyCondition('listing_id', $listing_mlsid)
    ->execute();

  return reset(entity_load('drealty_listing', array_keys($result['drealty_listing']), array(), $reset));
}

function drealty_listing_load_multiple($listing_mlsids = array(), $conditions = array(), $reset = FALSE) {
  
}

function drealty_listing_page_title(DrealtyListing $listing) {
  return $listing->name;
}

function drealty_openhouse_page_title(DrealtyOpenHouse $openHouse) {
  return $openHouse->name;
}

function drealty_agent_page_title(DrealtyAgent $agent) {
  return "{$agent->first_name} {$agent->last_name}";
}

function drealty_office_page_title(DrealtyAgent $office) {
  return $office->name;
}

function drealty_listing_page_view($listing, $view_mode = 'full', $langcode = NULL, $page = NULL) {
  $controller = entity_get_controller('drealty_listing');
  $content = $controller->view(array($listing->id => $listing), $view_mode, $langcode, $page);

  return $content;
}

function drealty_openhouse_page_view($openhouse, $view_mode = 'full', $langcode = NULL, $page = NULL) {
  $controller = entity_get_controller('drealty_openhouse');
  $content = $controller->view(array($openhouse->id => $openhouse), $view_mode, $langcode, $page);

  return $content;
}

function drealty_agent_page_view($agent, $view_mode = 'full', $langcode = NULL, $page = NULL) {
  $controller = entity_get_controller('drealty_agent');
  $content = $controller->view(array($agent->id => $agent), $view_mode, $langcode, $page);

  return $content;
}

function drealty_office_page_view($office, $view_mode = 'full', $langcode = NULL, $page = NULL) {
  $controller = entity_get_controller('drealty_office');
  $content = $controller->view(array($office->id => $office), $view_mode, $langcode, $page);

  return $content;
}

/**
 * Implements hook_views_api().
 */
function drealty_views_api() {
  return array(
      'api' => 3,
      'path' => drupal_get_path('module', 'drealty') . '/views',
  );
}

function drealty_listing_uri(DrealtyListing $listing) {
  return array('path' => 'listings/' . $listing->id);
}

function drealty_preprocess_entity(&$variables) {
  if ($variables['entity_type'] == 'drealty_listing') {

    $path = drupal_get_path('module', 'drealty');
    drupal_add_css($path . '/css/drealty.base.css', array('type' => 'file', 'group' => CSS_DEFAULT, 'every_page' => FALSE, 'media' => 'all'));
    switch ($variables['view_mode']) {
      case 'search':
        drupal_add_css($path . '/css/drealty.search.css', array('type' => 'file', 'group' => CSS_DEFAULT, 'every_page' => FALSE, 'media' => 'all'));
        break;
      default:
    }
  }
}

function drealty_search_api_multitext_getter_callback($item, $options = array(), $name = NULL) {
  $value = explode(",", $item->{$name});
  return $value;
}

function drealty_listing_create($values = array()) {
  return entity_get_controller('drealty_listing')->create($values);
}

function drealty_openhouse_create($values = array()) {
  return entity_get_controller('drealty_openhouse')->create($values);
}

function drealty_agent_create($values = array()) {
  return entity_get_controller('drealty_agent')->create($values);
}

function drealty_office_create($values = array()) {
  return entity_get_controller('drealty_office')->create($values);
}

class DrealtyListing extends Entity {

  public function __construct(array $values = array()) {
    parent::__construct($values, 'drealty_listing');
  }

  protected function defaultLabel() {
    return $this->name;
  }

  protected function defaultUri() {
    return array('path' => 'listings/' . $this->listing_id);
  }

}

class DrealtyListingController extends EntityAPIController {

  public function __construct($entityType) {
    parent::__construct($entityType);
  }

  public function buildContent($entity, $view_mode = 'full', $langcode = NULL, $content = array()) {
    $content = parent::buildContent($entity, $view_mode, $langcode, $content);

    foreach ($entity as $key => $value) {
      $content[$key] = array(
          '#value' => $value,
          '#markup' => empty($value) ? NULL : "<div><div class='field-label'><strong>$key</strong></div><div class='field-value'>$value</div></div>",
      );
    }

    $og_description = array(
        '#tag' => 'meta',
        '#attributes' => array(
            'property' => 'og:description',
            'content' => $entity->public_remarks,
        ),
    );

    $meta_description = array(
        '#tag' => 'meta',
        '#attributes' => array(
            'name' => 'description',
            'content' => $entity->public_remarks,
        ),
    );

    $title = "{$entity->street_number} {$entity->street_name} {$entity->street_suffix} - {$entity->city}, {$entity->state_or_province} {$entity->postal_code}";

    drupal_set_title($title);

    $og_title = array(
        '#tag' => 'meta',
        '#attributes' => array(
            'property' => 'og:title',
            'content' => $title,
        ),
    );

    $og_image = array(
        '#tag' => 'meta',
        '#attributes' => array(
            'property' => 'og:image',
            'content' => file_create_url(array_shift($entity->mls_images)->uri),
        ),
    );

    drupal_add_html_head($meta_description, 'meta_description');
    drupal_add_html_head($og_description, 'og_description');
    drupal_add_html_head($og_title, 'og_title');
    drupal_add_html_head($og_image, 'og_image');
    return $content;
  }

  public function attachLoad(&$queried_entities, $revision_id = FALSE) {
    parent::attachLoad($queried_entities, $revision_id);

    foreach ($queried_entities as $entity) {
      $fids = db_select('file_usage', 'f')
        ->fields('f', array('fid'))
        ->condition('id', $entity->id)
        ->condition('type', 'drealty_listing')
        ->execute()
        ->fetchAllAssoc('fid');
      if ($fids) {
        $fids = array_keys($fids);
        $files = file_load_multiple($fids);
        $entity->mls_images = $files;
      }
    }
  }

  public function create(array $values = array()) {
    $listing = parent::create($values);
    return $listing;
  }

  public function delete($ids, DatabaseTransaction $transaction = NULL) {

    $entities = $ids ? $this->load($ids) : FALSE;
    if (!$entities) {
      // Do nothing, in case invalid or no ids have been passed.
      return;
    }
    foreach ($entities as $entity) {
      foreach ($entity->mls_images as $file) {
        file_delete($file, TRUE);
      }
    }

    parent::delete($ids, $transaction);
  }

}

class DrealtyOpenHouse extends Entity {

  public function __construct(array $values = array()) {
    parent::__construct($values, 'drealty_openhouse');
  }

  protected function defaultLabel() {
    return $this->id;
  }

  protected function defaultUri() {
    return array('path' => 'openhouses/' . $this->listing_id);
  }

}

class DrealtyOpenHouseController extends EntityAPIController {

  public function __construct($entityType) {
    parent::__construct($entityType);
  }

  public function attachLoad(&$queried_entities, $revision_id = FALSE) {
    parent::attachLoad($queried_entities, $revision_id);

    foreach ($queried_entities as $entity) {
      $query = new EntityFieldQuery();
      $result = $query
        ->entityCondition('entity_type', 'drealty_listing')
        ->propertyCondition('listing_key', $entity->listing_key)
        ->execute();
      if ($result) {
        $entity->listing = reset(entity_load('drealty_listing', array_keys($result['drealty_listing']), array(), FALSE));
      }
    }
  }

  public function create(array $values = array()) {
    $openhouse = parent::create($values);
    return $openhouse;
  }

}

class DrealtyAgent extends Entity {

  public function __construct(array $values = array()) {
    parent::__construct($values, 'drealty_agent');
  }

  protected function defaultLabel() {
    return "{$this->first_name} {$this->last_name}";
  }

  protected function defaultUri() {
    return array('path' => 'agents/' . "{$this->first_name}_{$this->last_name}");
  }

}

class DrealtyAgentController extends EntityAPIController {

  public function __construct($entityType) {
    parent::__construct($entityType);
  }

  public function attachLoad(&$queried_entities, $revision_id = FALSE) {
    parent::attachLoad($queried_entities, $revision_id);

//    foreach ($queried_entities as $entity) {
//      $query = new EntityFieldQuery();
//      $result = $query
//        ->entityCondition('entity_type', 'drealty_agent')
//        ->propertyCondition('listing_key', $entity->listing_key)
//        ->execute();
//      if ($result) {
//        $entity->listing = reset(entity_load('drealty_listing', array_keys($result['drealty_listing']), array(), FALSE));
//      }
//    }
  }

  public function create(array $values = array()) {
    $agent = parent::create($values);
    return $agent;
  }

}

class DrealtyOffice extends Entity {

  public function __construct(array $values = array()) {
    parent::__construct($values, 'drealty_office');
  }

  protected function defaultLabel() {
    return $this->id;
  }

  protected function defaultUri() {
    return array('path' => 'offices/' . $this->office_id);
  }

}

class DrealtyOfficeController extends EntityAPIController {

  public function __construct($entityType) {
    parent::__construct($entityType);
  }

  public function attachLoad(&$queried_entities, $revision_id = FALSE) {
    parent::attachLoad($queried_entities, $revision_id);

//    foreach ($queried_entities as $entity) {
//      $query = new EntityFieldQuery();
//      $result = $query
//        ->entityCondition('entity_type', 'drealty_office')
//        ->propertyCondition('listing_key', $entity->listing_key)
//        ->execute();
//      if ($result) {
//        $entity->listing = reset(entity_load('drealty_listing', array_keys($result['drealty_listing']), array(), FALSE));
//      }
//    }
  }

  public function create(array $values = array()) {
    $office = parent::create($values);
    return $office;
  }

}



function drealty_listing_address($listing) {
  $parts = array();

  // Street
  $parts[] = "{$listing->street_number} {$listing->street_dir_prefix} {$listing->street_name} {$listing->street_dir_suffix} {$listing->street_suffix}";
  // City
  $parts[] = $listing->city;
// State / Zip
  $parts[] = "{$listing->state_or_province} {$listing->postal_code}";

  for ($i = 0; $i < sizeof($parts); $i++) {
    $parts[$i] = str_replace("  ", " ", $parts[$i]);
    $parts[$i] = trim($parts[$i]);
  }

  $address = implode(', ', $parts);

  return $address;
}
