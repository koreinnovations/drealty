<?php

define('DREALTY_LISTING_DEFAULT_URL_PATTERN', "[drealty_listing:listing-id]-[drealty_listing:street-number]-[drealty_listing:street-name]-[drealty_listing:street-suffix]-[drealty_listing:city]-[drealty_listing:state-or-province]-[drealty_listing:postal-code]", TRUE);
define('DREALTY_LISTING_DEFAULT_TITLE_PATTERN', "[drealty_listing:street-number] [drealty_listing:street-name] [drealty_listing:street-suffix] - [drealty_listing:city], [drealty_listing:state-or-province] [drealty_listing:postal-code]", TRUE);

define('DREALTY_OPENHOUSE_DEFAULT_URL_PATTERN', "openhouse/[drealty_openhouse:id]");
define('DREALTY_OPENHOUSE_DEFAULT_TITLE_PATTERN', "open house title");

define('DREALTY_AGENT_DEFAULT_URL_PATTERN', "agent/[drealty_agent:first_name]-[drealty_agent:last_name]");
define('DREALTY_AGENT_DEFAULT_TITLE_PATTERN', "[drealty_agent:first_name] [drealty_agent:last_name]");

define('DREALTY_OFFICE_DEFAULT_URL_PATTERN', "office/[drealty_office:office_name]");
define('DREALTY_OFFICE_DEFAULT_TITLE_PATTERN', "[drealty_office:office_name]");

function drealty_entity_info() {
  $entities = array();
  $entities['drealty_listing'] = array(
      'label' => t('dRealty Listing'),
      'entity class' => 'DrealtyListing',
      'controller class' => 'DrealtyListingController',
      'token type' => 'drealty_listing',
      'base table' => 'drealty_listing',
      'uri callback' => 'entity_class_uri',
      'fieldable' => TRUE,
      'view modes' => array(
          'full' => array(
              'label' => 'Full View',
              'custom settings' => FALSE,
          ),
          'search' => array(
              'label' => 'Search View',
              'custom settings' => TRUE,
          ),
          'list' => array(
              'label' => 'List View',
              'custom settings' => TRUE,
          ),
      ),
      'bundles' => array(
          'drealty_listing' => array(
              'label' => t('dRealty Listing'),
              'admin' => array(
                  'path' => 'admin/drealty/structure/drealty_listing',
              ),
          ),
      ),
      'entity keys' => array(
          'id' => 'id',
      ),
      'admin ui' => array(
          'path' => 'admin/content/drealty_listings',
          'file' => 'includes/drealty.listing.admin.inc',
          'controller class' => 'DrealtyListingUIController',
          'menu wildcard' => '%drealty_listing',
      ),
      'module' => 'drealty',
      'access callback' => 'drealty_connection_entity_access',
  );


  $entities['drealty_openhouse'] = array(
      'label' => t('dRealty OpenHouse'),
      'entity class' => 'DrealtyOpenHouse',
      'controller class' => 'DrealtyOpenHouseController',
      'base table' => 'drealty_openhouse',
      'uri callback' => 'entity_class_uri',
      'fieldable' => TRUE,
      'view modes' => array(
          'full' => array(
              'label' => 'Full View',
              'custom settings' => FALSE,
          ),
          'search' => array(
              'label' => 'Search View',
              'custom settings' => TRUE,
          ),
          'list' => array(
              'label' => 'List View',
              'custom settings' => TRUE,
          ),
          'block' => array(
              'label' => 'Block View',
              'custom settings' => TRUE,
          ),
      ),
      'bundles' => array(
          'drealty_openhouse' => array(
              'label' => t('dRealty Open House'),
              'admin' => array(
                  'path' => 'admin/drealty/structure/drealty_openhouse',
              ),
          ),
      ),
      'entity keys' => array(
          'id' => 'id',
      ),
      'admin ui' => array(
          'path' => 'admin/content/drealty_openhouses',
          'file' => 'includes/drealty.openhouse.admin.inc',
          'controller class' => 'DrealtyOpenHouseUIController',
          'menu wildcard' => '%drealty_openhouse',
      ),
      'module' => 'drealty',
      'access callback' => 'drealty_connection_entity_access',
  );

  $entities['drealty_agent'] = array(
      'label' => t('dRealty Agent'),
      'entity class' => 'DrealtyAgent',
      'controller class' => 'DrealtyAgentController',
      'base table' => 'drealty_agent',
      'uri callback' => 'entity_class_uri',
      'label callback' => 'entity_class_label',
      'fieldable' => TRUE,
      'view modes' => array(
          'full' => array(
              'label' => 'Full View',
              'custom settings' => FALSE,
          ),
          'search' => array(
              'label' => 'Search View',
              'custom settings' => TRUE,
          ),
          'list' => array(
              'label' => 'List View',
              'custom settings' => TRUE,
          ),
          'block' => array(
              'label' => 'Block View',
              'custom settings' => TRUE,
          ),
      ),
      'bundles' => array(
          'drealty_agent' => array(
              'label' => t('dRealty Agent'),
              'admin' => array(
                  'path' => 'admin/drealty/structure/drealty_agent',
              ),
          ),
      ),
      'entity keys' => array(
          'id' => 'id',
      ),
      'admin ui' => array(
          'path' => 'admin/content/drealty_agents',
          'file' => 'includes/drealty.agent.admin.inc',
          'controller class' => 'DrealtyAgentUIController',
          'menu wildcard' => '%drealty_agent',
      ),
      'module' => 'drealty',
      'access callback' => 'drealty_connection_entity_access',
  );

  $entities['drealty_office'] = array(
      'label' => t('dRealty Office'),
      'entity class' => 'DrealtyOffice',
      'controller class' => 'DrealtyOfficeController',
      'base table' => 'drealty_office',
      'uri callback' => 'entity_class_uri',
      'fieldable' => TRUE,
      'view modes' => array(
          'full' => array(
              'label' => 'Full View',
              'custom settings' => FALSE,
          ),
          'search' => array(
              'label' => 'Search View',
              'custom settings' => TRUE,
          ),
          'list' => array(
              'label' => 'List View',
              'custom settings' => TRUE,
          ),
      ),
      'bundles' => array(
          'drealty_office' => array(
              'label' => t('dRealty Office'),
              'admin' => array(
                  'path' => 'admin/drealty/structure/drealty_office',
              ),
          ),
      ),
      'entity keys' => array(
          'id' => 'id',
      ),
      'admin ui' => array(
          'path' => 'admin/content/drealty_offices',
          'file' => 'includes/drealty.office.admin.inc',
          'controller class' => 'DrealtyOfficeUIController',
          'menu wildcard' => '%drealty_office',
      ),
      'module' => 'drealty',
      'access callback' => 'drealty_connection_entity_access',
  );

  $entities['drealty_connection_entity'] = array(
      'label' => t('dRealty Connection'),
      'entity class' => 'dRealtyConnectionEntity',
      'controller class' => 'dRealtyConnectionEntityContoller',
      'exportable' => TRUE,
      'fieldable' => FALSE,
      'base table' => 'drealty_connections',
      'entity keys' => array(
          'id' => 'conid',
          'label' => 'name',
          'name' => 'name'
      ),
      'module' => 'drealty',
      'access callback' => 'drealty_connection_entity_access',
      'admin ui' => array(
          'path' => 'admin/drealty/connections',
          'file' => 'includes/drealty.connection.admin.inc',
          'controller class' => 'DrealtyConnectionUIController',
      ),
  );
  
    // Support entity cache module.
  if (module_exists('entitycache')) {
    $entities['drealty_listing']['field cache'] = FALSE;
    $entities['drealty_listing']['entity cache'] = TRUE;
  }

  return $entities;
}

/**
 * Implements hook_ctools_plugin_directory().
 *
 * It simply tells panels where to find the .inc files that define various
 * args, contexts, content_types. In this case the subdirectories of
 * ctools_plugin_example/panels are used.
 */
function drealty_ctools_plugin_directory($module, $plugin) {
  if ($module == 'ctools' && !empty($plugin)) {
    return "plugins/$plugin";
  }
}

function drealty_connection_entity_access($op, $type = NULL, $account = NULL) {
  return TRUE;
}

function drealty_menu() {
  $items = array();
  $items['admin/drealty'] = array(
      'title' => 'dRealty',
      'description' => 'Manage the dRealty Installation.',
      'page callback' => 'drealty_management_page',
      'access arguments' => array('access drealty admin'),
      'type' => MENU_NORMAL_ITEM,
  );

  $items['admin/drealty/settings'] = array(
      'title' => 'dRealty Settings',
      'description' => t('Configuration settings for dRealty'),
      'access arguments' => array('access drealty admin'),
      'page callback' => 'drupal_get_form',
      'page arguments' => array('drealty_settings_form'),
      'file' => 'drealty.admin.inc',
      'file path' => drupal_get_path('module', 'drealty') . '/includes',
      'type' => MENU_NORMAL_ITEM,
  );

  $items['admin/drealty/fields_autocomplete/%/%/%'] = array(
      'title' => 'Autocomplete for fields',
      'page callback' => 'drealty_fields_autocomplete',
      'page arguments' => array(3, 4, 5),
      'access arguments' => array('access drealty admin'),
      'type' => MENU_CALLBACK
  );

  $items['admin/drealty/office_autocomplete/%/%'] = array(
      'title' => 'Autocomplete for fields',
      'page callback' => 'drealty_office_autocomplete_callback',
      'file' => 'drealty.admin.inc',
      'file path' => drupal_get_path('module', 'drealty') . '/includes',
      'page arguments' => array(3, 4),
      'access arguments' => array('access drealty admin'),
      'type' => MENU_CALLBACK
  );

  $items['admin/drealty/structure/drealty_listing'] = array(
      'title callback' => 'drealty_field_ui_admin_title_callback',
      'title arguments' => array(3),
      'access callback' => TRUE,
      'page callback' => 'drealty_some_func',
      'page arguments' => array(3),
      'type' => MENU_NORMAL_ITEM,
  );
    $items['admin/drealty/structure/drealty_openhouse'] = array(
      'title callback' => 'drealty_field_ui_admin_title_callback',
      'title arguments' => array(3),
      'access callback' => TRUE,
      'page callback' => 'drealty_some_func',
      'page arguments' => array(3),
      'type' => MENU_NORMAL_ITEM,
  );
      $items['admin/drealty/structure/drealty_agent'] = array(
      'title callback' => 'drealty_field_ui_admin_title_callback',
      'title arguments' => array(3),
      'access callback' => TRUE,
      'page callback' => 'drealty_some_func',
      'page arguments' => array(3),
      'type' => MENU_NORMAL_ITEM,
  );
        $items['admin/drealty/structure/drealty_office'] = array(
      'title callback' => 'drealty_field_ui_admin_title_callback',
      'title arguments' => array(3),
      'access callback' => TRUE,
      'page callback' => 'drealty_some_func',
      'page arguments' => array(3),
      'type' => MENU_NORMAL_ITEM,
  );

  return $items;
}

function drealty_field_ui_admin_title_callback($type) {
  switch ($type) {
    case 'drealty_listing':
      $title = "dRealty Listing Field Managment";
      break;
    case 'drealty_agent':
      $title = "dRealty Agent Field Managment";
      break;
    case 'drealty_office':
      $title = "dRealty Office Field Managment";
      break;
    case 'drealty_openhouse':
      $title = "dRealty Open House Field Managment";
      break;
    default:
      $title = 'dRealty Field Management';
  }
  return $title;
}

function drealty_some_func($type) {
  return $type;
}

function drealty_management_page() {

  ctools_add_css('drealty.admin', 'drealty');

  $content = '';
  $content .= "<div class='section'>";
  $content .= "<h3>dRealty RETS Configuration</h3>";
  $content .= "<div class='description'>Use the adminstration sections below to configure one or more RETs connections.</div>";
  $content .= "<div>";
  $content .= l('dRealty Connections', 'admin/drealty/connections');
  $content .= "<div class='description'>Manage dRealty Connections</div>";
  $content .= "</div>";

  $content .= "<div>";
  $content .= l('dRealty Settings', 'admin/drealty/settings');
  $content .= "<div class='description'>Manage dRealty Global Settings</div>";
  $content .= "</div>";
  $content .= "</div>";

  $content .= "<div class='section'>";
  $content .= "<h3>dRealty Entity Field Configuration</h3>";
  $content .= "<div class='description'>Use the adminstration sections below to add | remove | manage fields for the various dRealty Entities via Drupal's Core Field API.</div>";
  $content .= "<div><strong>dRealty Listings</strong></div>";
  $content .= "<div>" . l("Manage Fields", "admin/drealty/structure/drealty_listing/fields") . ' | ' . l("Manage Display", "admin/drealty/structure/drealty_listing/display") . '</div>';
  $content .= "<div><strong>dRealty Open Houses</strong></div>";
  $content .= "<div>" . l("Manage Fields", "admin/drealty/structure/drealty_openhouse/fields") . ' | ' . l("Manage Display", "admin/drealty/structure/drealty_openhouse/display") . '</div>';
  $content .= "<div><strong>dRealty Agents</strong></div>";
  $content .= "<div>" . l("Manage Fields", "admin/drealty/structure/drealty_agent/fields") . ' | ' . l("Manage Display", "admin/drealty/structure/drealty_agent/display") . '</div>';
  $content .= "<div><strong>dRealty Offices</strong></div>";
  $content .= "<div>" . l("Manage Fields", "admin/drealty/structure/drealty_office/fields") . ' | ' . l("Manage Display", "admin/drealty/structure/drealty_office/display") . '</div>';
  $content .= "</div>";

  return $content;
}

/**
 * Implements hook_rdf_namespaces().
 */
function drealty_rdf_namespaces() {
  return array(
      'og' => 'http://ogp.me/ns#',
      'fb' => 'http://www.facebook.com/2008/fbml',
  );
}

function drealty_class_load($cid) {
  $dr = new drealtyResources();
  return $dr->FetchClass($cid);
}

function drealty_fields_autocomplete($conid, $class, $string) {
  if ($conid == NULL) {
    exit();
  }

  $matches = array();
  //$result = db_query("SELECT * FROM {drealty_fields} WHERE conid = :conid AND resource = :resource AND display = 1", array(':conid' => $conid, ':resource' => $resource))->fetchAll();
  //$result = db_query("SELECT fid, systemname, longname FROM {drealty_fields} WHERE LOWER(longname) LIKE LOWER(:pattern) AND conid = :conid", array('::pattern' => db_like($string), ':conid' => $conid));
  $ored = db_or();
  $ored
    ->condition('systemname', '%' . drupal_strtolower($string) . '%', 'LIKE')
    ->condition('longname', '%' . drupal_strtolower($string) . '%', 'LIKE');

  $anded = db_and();
  $anded
    ->condition('conid', $conid)
    ->condition('classes', '%' . $class . '%', 'LIKE');

  $results = db_select('drealty_fields', 'f')
    ->fields('f')
    ->condition($anded)
    ->condition($ored)
    ->execute()
    ->fetchAll();

  foreach ($results as $data) {
    $matches[$data->systemname . ' - ' . $data->longname] = $data->systemname . ' - ' . $data->longname;
  }
  print drupal_json_encode($matches);
  //print drupal_to_js($matches);
  exit();
}

function drealty_sentence_case($string) {
  $sentences = preg_split('/([.?!]+)/', $string, -1, PREG_SPLIT_NO_EMPTY | PREG_SPLIT_DELIM_CAPTURE);
  $new_string = '';
  foreach ($sentences as $key => $sentence) {
    $new_string .= ($key & 1) == 0 ?
      drupal_ucfirst(drupal_strtolower(trim($sentence))) :
      $sentence . ' ';
  }
  return trim($new_string);
}

function drealty_word_limit($text, $limit=40) {

  $explode = explode(' ', $text);

  if (count($explode) < $limit) {
    return $text;
  }

  $string = '';

  $dots = '...';
  if (count($explode) <= $limit) {
    $dots = '';
  }

  for ($i = 0; $i < $limit; $i++) {
    $string .= $explode[$i] . " ";
  }

  if ($dots) {
    $string = drupal_substr($string, 0, drupal_strlen($string));
  }

  return "$string $dots";
}

function drealty_geocode($address, $geocoder_handler) {

  $libraries = &drupal_static(__FUNCTION__);

  if (!isset($libraries)) {
    $libraries = libraries_get_libraries();
  }

  $latlon = new stdClass();
  $latlon->success = FALSE;


  if (array_key_exists("geoPHP", $libraries)) {
    $geometry = geocoder($geocoder_handler, $address);
    if (isset($geometry)) {
      $latlon->lat = $geometry->y();
      $latlon->lon = $geometry->x();
      $latlon->success = TRUE;
    }
  }

  return $latlon;
}

function drealty_load_phrets() {
  $static_cache = &drupal_static(__FUNCTION__);

  if (!isset($static_cache)) {
    $path = libraries_get_path('phRets');
    $file = $path . '/phRets.php';
    if (file_exists($file)) {
      if (include_once($file)) {
        $static_cache = $file;
      }
    }
  }
  return $static_cache;
}

function drealty_types_form($form, &$form_state) {

  ctools_add_css('drealty.admin', 'drealty');

  $content .= "<div class='section'>";
  $content .= "<h3>dRealty Entity Field Configuration</h3>";
  $content .= "<div class='description'>Use the adminstration sections below to manage fields for the various dRealty Entities.</div>";
  $content .= "<div><strong>dRealty Listings</strong></div>";
  $content .= "<div>" . l("Manage Fields", "admin/drealty/structure/drealty_listing/fields") . ' | ' . l("Manage Display", "admin/drealty/structure/drealty_listing/display") . '</div>';
  $content .= "<div><strong>dRealty Open Houses</strong></div>";
  $content .= "<div>" . l("Manage Fields", "admin/drealty/structure/drealty_openhouse/fields") . ' | ' . l("Manage Display", "admin/drealty/structure/drealty_openhouse/display") . '</div>';
  $content .= "<div><strong>dRealty Agents</strong></div>";
  $content .= "<div>" . l("Manage Fields", "admin/drealty/structure/drealty_agent/fields") . ' | ' . l("Manage Display", "admin/drealty/structure/drealty_agent/display") . '</div>';
  $content .= "<div><strong>dRealty Offices</strong></div>";
  $content .= "<div>" . l("Manage Fields", "admin/drealty/structure/drealty_office/fields") . ' | ' . l("Manage Display", "admin/drealty/structure/drealty_office/display") . '</div>';
  $content .= "</div>";

  return $content;
}

function drealty_help($path, $arg) {
  switch ($path) {
    case "admin/help#drealty":
      return '<p>' . t("RETS enabled Real Estate IDX solution for Drupal.") . '</p>';
      break;
  }
}

/**
 * Implements hook_permission().
 */
function drealty_permission() {
  // We set up permisssions to manage entity types, manage all entities and the
  // permissions for each individual entity
  $permissions = array(
      'access drealty admin' => array(
          'title' => t('Administer dRealty'),
      ),
      'bypass drealty access' => array(
          'title' => t('Bypass drealty content access control'),
          'description' => t('View, edit and delete all content regardless of permission restrictions.'),
          'restrict access' => TRUE,
      ),
  );

  $types = array('drealty listing', 'drealty agent',
      'drealty office', 'drealty openhouse');

  foreach ($types as $type) {
    $permissions["view $type"] = array('title' => t('%type:View content', array('%type' => $type)));
    $permissions["create $type"] = array('title' => t('%type: Create new content', array('%type' => $type)));
    $permissions["edit $type"] = array('title' => t('%type: Edit any content', array('%type' => $type)));
    $permissions["delete $type"] = array('title' => t('%type: Delete any content', array('%type' => $type)));
  }

  return $permissions;
}

/**
 * Implements hook_title_callback().
 *
 * @param string $resource_type
 * @param int $conid
 * @return none
 */
function drealty_resource_title_callback($resource_type, $conid) {
  $dc = new drealtyConnection();
  $connections = $dc->FetchConnections();
  $connection_name = $connections[$conid]->name;
  return t('@connection - Configure @resource Resources', array('@connection' => $connection_name, '@resource' => ucwords(str_replace("_", " ", $resource_type))));
}

/**
 * Implements hook_theme().
 */
function drealty_theme($existing, $type, $theme, $path) {
  $themes = array();

  $themes['drealty_classes_form'] = array(
      'render element' => 'form',
      'file' => 'includes/drealty.connection.admin.inc',
  );

  $themes['drealty_fields_form'] = array(
      'render element' => 'form',
      'file' => 'includes/drealty.connection.admin.inc',
  );

  $themes['drealty_general_setting_form'] = array(
      'render element' => 'form',
      'file' => 'includes/drealty.admin.inc',
  );

//  $themes['entity'] = array(
//    'render element' => 'elements',
//    'template' => 'entity',
//  );
//  
  
//  $themes['views_view_field__active'] = array(
//      'template' => 'views/views-view-field--active',
//      'original hook' => 'views_view',
//      'preprocess functions' => array(
//          'template_preprocess',
//          'template_preprocess_views_view',
//      ),
//      'arguments' => array('view' => NULL),
//  );
//
  $themes['drealty_listing'] = array(
      'render element' => 'elements',
      'template' => 'drealty-listing',
  );
//
//  $themes['drealty_agent'] = array(
//      'render element' => 'elements',
//      'template' => 'templates/drealty-agent',
//  );

//  $themes['drealty_listing__search'] = array(
//      'render element' => 'elements',
//      'template' => 'drealty-listing--search',
//  );

//  $themes['drealty_mls_images'] = array(
//      'variables' => array('mls_images', 'listing' => NULL),
//      'template' => 'templates/drealty-mls-images',
//  );
//
//
//
//  $themes['drealty_search_map'] = array(
//      'variables' => array('listings' => null),
//      'template' => 'templates/drealty-search-map',
//  );


  return $themes;
}

/**
 * Implements hook_views_api().
 */
function drealty_views_api() {
  return array(
      'api' => 3,
      'path' => drupal_get_path('module', 'drealty') . '/views',
  );
}

function drealty_preprocess_entity(&$variables) {
  if ($variables['entity_type'] == 'drealty_listing') {
    ctools_add_css('drealty.base', 'drealty');
    switch ($variables['view_mode']) {
      case 'search':
        ctools_add_css('drealty.search', 'drealty');
        break;
      default:
    }
  }
}

function drealty_search_api_multitext_getter_callback($item, $options = array(), $name = NULL) {
  $value = explode(",", $item->{$name});
  return $value;
}

// ***********************************************************************************************************  //
// Listing Functions
// ***********************************************************************************************************  //


function drealty_access($op, $entity = NULL, $type = NULL, $account = NULL) {

  $rights = &drupal_static(__FUNCTION__, array());

  $type_name = str_replace('_', ' ', $entity->entityType());

  if (!$entity || !in_array($op, array('view', 'delete', 'create', 'edit'), TRUE)) {
    // If there was no listing to check against, or the $op was not one of the
    // supported ones, we return access denied.
    return FALSE;
  }
  // If no user object is supplied, the access check is for the current user.
  if (empty($account)) {
    $account = $GLOBALS['user'];
  }

  $cid = is_object($entity) ? $entity->id : $entity;

  if (isset($rights[$account->uid][$cid][$op])) {
    return $rights[$account->uid][$cid][$op];
  }

  if (user_access('bypass drealty access', $account)) {
    $rights[$account->uid][$cid][$op] = TRUE;
    return TRUE;
  }

  if (!user_access('access content', $account)) {
    $rights[$account->uid][$cid][$op] = FALSE;
    return FALSE;
  }

  switch ($op) {
    case 'view':
      if (user_access("view $type_name")) {
        $rights[$account->uid][$cid][$op] = TRUE;
        return TRUE;
      }
    case 'create':
      if (user_access("create $type_name")) {
        $rights[$account->uid][$cid][$op] = TRUE;
        return TRUE;
      }
    case 'edit':
      if (user_access("edit $type_name")) {
        $rights[$account->uid][$cid][$op] = TRUE;
        return TRUE;
      }
    case 'delete':
      if (user_access("delete $type_name")) {
        $rights[$account->uid][$cid][$op] = TRUE;
        return TRUE;
      }
  }
  $rights[$account->uid][$cid][$op] = FALSE;
  return FALSE;
}

function drealty_listing_load($listing_mlsid, $reset = FALSE) {
  $query = new EntityFieldQuery();
  $result = $query
    ->entityCondition('entity_type', 'drealty_listing')
    ->propertyCondition('listing_id', $listing_mlsid)
    ->execute();

  return reset(entity_load('drealty_listing', array_keys($result['drealty_listing']), array(), $reset));
}

function drealty_listing_load_multiple($listing_mlsids = array(), $conditions = array(), $reset = FALSE) {

}

/**
 *
 * @param DrealtyListing $listing
 * @return type
 */
function drealty_listing_page_title(DrealtyListing $listing) {
  return $listing->name;
}

/**
 *
 * @param type $listing
 * @param type $view_mode
 * @param type $langcode
 * @param type $page
 * @return type
 */
function drealty_listing_page_view($listing, $view_mode = 'full', $langcode = NULL, $page = NULL) {
  $controller = entity_get_controller('drealty_listing');
  $content = $controller->view(array($listing->id => $listing), $view_mode, $langcode, $page);

  return $content;
}

function drealty_listing_create($values = array()) {
  return entity_get_controller('drealty_listing')->create($values);
}

function drealty_listing_uri(DrealtyListing $listing) {
  return array('path' => 'listings/' . $listing->id);
}

// ***********************************************************************************************************  //
// Office Functions
// ***********************************************************************************************************  //

function drealty_office_access($op, $office = NULL, $account = NULL) {
  return TRUE;
}

function drealty_office_load($office_mlsid, $reset = FALSE) {
  $query = new EntityFieldQuery();
  $result = $query
    ->entityCondition('entity_type', 'drealty_office')
    ->propertyCondition('office_id', $office_mlsid)
    ->execute();

  return reset(entity_load('drealty_office', array_keys($result['drealty_office']), array(), $reset));
}

function drealty_office_page_title(DrealtyAgent $office) {
  return $office->name;
}

function drealty_office_page_view($office, $view_mode = 'full', $langcode = NULL, $page = NULL) {
  $controller = entity_get_controller('drealty_office');
  $content = $controller->view(array($office->id => $office), $view_mode, $langcode, $page);

  return $content;
}

function drealty_office_create($values = array()) {
  return entity_get_controller('drealty_office')->create($values);
}

// ***********************************************************************************************************  //
// Open House Functions
// ***********************************************************************************************************  //

function drealty_openhouse_load($listing_mlsid, $reset = FALSE) {
  $query = new EntityFieldQuery();
  $result = $query
    ->entityCondition('entity_type', 'drealty_openhouse')
    ->propertyCondition('listing_id', $listing_mlsid)
    ->execute();

  return reset(entity_load('drealty_openhouse', array_keys($result['drealty_openhouse']), array(), $reset));
}

function drealty_openhouse_page_title(DrealtyOpenHouse $openHouse) {
  return $openHouse->name;
}

function drealty_openhouse_page_view($openhouse, $view_mode = 'full', $langcode = NULL, $page = NULL) {
  $controller = entity_get_controller('drealty_openhouse');
  $content = $controller->view(array($openhouse->id => $openhouse), $view_mode, $langcode, $page);

  return $content;
}

function drealty_openhouse_access($op, $openhouse = NULL, $account = NULL) {
  return TRUE;
}

function drealty_openhouse_create($values = array()) {
  return entity_get_controller('drealty_openhouse')->create($values);
}

// ***********************************************************************************************************  //
// Agent Functions
// ***********************************************************************************************************  //
function drealty_agent_access($op, $agent = NULL, $account = NULL) {
  return TRUE;
}

function drealty_agent_load($agent_name, $reset = FALSE) {
  $name = explode("_", $agent_name);
  $query = new EntityFieldQuery();
  $result = $query
    ->entityCondition('entity_type', 'drealty_agent')
    ->propertyCondition('first_name', $name[0])
    ->propertyCondition('last_name', $name[1])
    ->execute();

  return reset(entity_load('drealty_agent', array_keys($result['drealty_agent']), array(), $reset));
}

function drealty_agent_page_title(DrealtyAgent $agent) {
  return "{$agent->first_name} {$agent->last_name}";
}

function drealty_agent_page_view($agent, $view_mode = 'full', $langcode = NULL, $page = NULL) {
  $controller = entity_get_controller('drealty_agent');
  $content = $controller->view(array($agent->id => $agent), $view_mode, $langcode, $page);

  return $content;
}

function drealty_agent_create($values = array()) {
  return entity_get_controller('drealty_agent')->create($values);
}

